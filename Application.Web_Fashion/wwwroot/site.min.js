angular.module('Enums', []).
   factory('Enum', [function () {

       var service = {
           monthList: [ { Id: 1, Name: 'January' }, { Id: 2, Name: 'February' }, { Id: 3, Name: 'March' },
                        { Id: 4, Name: 'April' }, { Id: 5, Name: 'May' }, { Id: 6, Name: 'June' },
                        { Id: 7, Name: 'July' }, { Id: 8, Name: 'August' }, { Id: 9, Name: 'September' },
                        { Id: 10, Name: 'October' }, { Id: 11, Name: 'November' }, { Id: 12, Name: 'December' }]
       };
      
       return service;

   }]);
var app = angular.module('app', ['Enums', 'AjaxLoaderServices', 'ngSanitize']);

function siteCurrency() {
    if (!window.currency) {
        $.ajax({
            dataType: "json",
            url: '/Setting/GetCurrencySymbol',
            type: 'GET',
            async: false,
            success: function (data) {
                window.currency = data;
            },
            error(xhr) {
                window.currency = "$"
            }
        });
    }
    return window.currency;
}

function getVatPercentage() {
    if (!window.vat) {
        $.ajax({
            dataType: "json",
            url: '/Setting/GetVat',
            type: 'GET',
            async: false,
            success: function (data) {
                window.vat = data;
            },
            error(xhr) {
                window.vat = "0"
            }
        });
    }
    return window.vat;
}

function getStripePublishKey() {
    var key = '';
    $.ajax({
        dataType: "json",
        url: '/Setting/GetStripePublishKey',
        type: 'GET',        
        async: false,
        success: function (data) {
            key = data;
        },
        error(xhr) {
            var e = xhr.responseText;            
        }
    });
    return key;
}

//--------------------------- Start: Shopping Cart -----------------------------

function getShippingCharge() {
    return 0; // 1000;
}

function getPrefecture_City(postalCode) {
    var map = window.address;
    var addr = map.get(postalCode);
    return addr;
}

function getSummaryAmount() {
    
    var subTotal = 0;
    var grandTotal = 0;
    var vatAmount = 0;
    var shippingAmount = 0;
    var totalQuantity = 0;

    var cart = getCart();

    for (var i = 0; i < cart.length; i++) {

        var itemTotal = (parseFloat(cart[i].RetailPrice, 10) * parseInt(cart[i].Quantity, 10));
        subTotal += itemTotal;
        totalQuantity += parseInt(cart[i].Quantity, 10);
    }

    vatAmount = Math.round((subTotal * getVatPercentage()) / 100);
    shippingAmount = 0; //1000; // TODO
    grandTotal = subTotal + vatAmount + shippingAmount;

    var obj = {
        subTotal: subTotal,
        vatAmount: vatAmount,
        shippingAmount: shippingAmount,
        grandTotal: grandTotal,
        totalQuantity: totalQuantity
    };
    return obj;
}

function addToCart(attributeVariationId, productId, name, quantity, price, imageUrl) {

    var cart = getCart();

    if (cart === null) {
        cart = [];        
    }

    var isAdded = false;

    for (var i = 0; i < cart.length; i++) {

        if (attributeVariationId) {
            if (cart[i].Id === productId && cart[i].AttributeVariationId === attributeVariationId) {
                cart[i].Quantity = parseInt(cart[i].Quantity, 10) + parseInt(quantity, 10);

                isAdded = true;
                break;
            }
        } else {

            if (cart[i].Id == productId) {
                cart[i].Quantity = parseInt(cart[i].Quantity, 10) + parseInt(quantity, 10);

                isAdded = true;
                break;
            }
        }
    }

    if (!isAdded) {
        cart.push({ AttributeVariationId: attributeVariationId, Id: productId, Name: name, Quantity: quantity, RetailPrice: price, ImageUrl: imageUrl });
    }

    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCounter();
}

function animateAddToCart(obj) {
    var cart = $('.top-shopping-cart');
    var sectionParent = $(obj).closest('.item-link-container');
    var img = $('.grid-item-image', sectionParent).find("img").eq(0);

    var imgtodrag = img;
    if (imgtodrag) {
        var imgclone = imgtodrag.clone()
            .offset({
                top: imgtodrag.offset().top,
                left: imgtodrag.offset().left
            })
            .css({
                'opacity': '0.5',
                'position': 'absolute',
                'height': '150px',
                'width': '150px',
                'z-index': '100'
            })
            .appendTo($('body'))
            .animate({
                'top': cart.offset().top + 10,
                'left': cart.offset().left + 10,
                'width': 75,
                'height': 75
            }, 1000, 'easeInOutExpo');

        setTimeout(function () {
            cart.effect("shake", {
                times: 2
            }, 200);
        }, 1500);

        imgclone.animate({
            'width': 0,
            'height': 0
        }, function () {            
        });
    }
}

function updateCartCounter() {
    $('#nav-cart-count').html(getCartItemCount());
}

function clearCart() {
    removeCartItem();
}

function getCartItemCount() {

    var totalItemCount = 0;
    var cart = getCart();
    
    for (var i = 0; i < cart.length; i++) {
        totalItemCount += parseInt(cart[i].Quantity, 10);
    }

    return totalItemCount;
}

function getCart() {
    var cart = localStorage.getItem('cart');
    if (!cart) {
        return [];
    }
    return JSON.parse(cart);
}

function updateCart(cart) {
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCounter();
}

function removeCartItem(productId) {

    if (productId) {
        var cartItems = jQuery.removeFromArray(productId, getCart());        
    }
    else {
        var cartItems = [];        
    }

    localStorage.setItem('cart', JSON.stringify(cartItems));
    updateCartCounter();
}

jQuery.removeFromArray = function (value, arr) {
    return jQuery.grep(arr, function (elem, index) {
        return elem.Id !== value;
    });
};
//--------------------------- End: Shopping Cart -------------------------------


function setButtonState(buttonId, isDisable) {
    $('#' + buttonId).prop('disabled', isDisable);
}

function showAlertMessage(isSuccess, message) {
    if (isSuccess) {
        $('.alert-success').show();
        $('.alert-danger').hide();

        if (message) {
            $('.message-text', $('.alert-success')).html(message);
        }

    } else {
        $('.alert-success').hide();
        $('.alert-danger').show();

        if (message) {
            $('.message-text', $('.alert-danger')).html(message);
        }
    }
}

function getParam(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function json2JavascriptDate(jsonDate) {
    if (jsonDate && jsonDate !== '') {
        return new Date(parseInt(jsonDate.replace('/Date(', '').replace(')/', ''), 10));
    }
    //else return "input is not a json date";
}

function getChromeFormattedDate(stringDate) {
    var dateParts = stringDate.split('-');
    var month = dateParts[0] - 1, day = dateParts[1], year = dateParts[2];
    return $filter('date')(new Date(year, month, day), 'yyyy-MM-dd');
}

function getUserStatus() {
    var isLoggedIn = false;
    var isVerified = false;
    var isAdmin = false;

    $.ajax({
        'async': false,
        'url': '/Account/GetUserStatus',
        'success': function (data) {
            isLoggedIn = data.isLoggedIn;
            isVerified = data.isVerified;
            isAdmin = data.isAdmin;
        }
    });
    return { isLoggedIn: isLoggedIn, isVerified: isVerified, isAdmin: isAdmin };
}

/*------------------- Feedback Slider -------------------*/
$(function () {
    $("#feedback-tab").click(function () {
        $("#feedback-form").toggle("slide");
    });

    $("#fb-btnClose").click(function () {
        $("#feedback-form").hide('slide');
    });

    function clearFBControl() {
        $('#fb-email').val('');
        $('#fb-message').val('');
    }

    function showHide_FB_Loading(show) {
        if (show) {
            $('#fb-status-msg').show();
            $('#fb-email').attr('disabled', 'disabled');
            $('#fb-message').attr('disabled', 'disabled');
            $('#fb-btnSend').attr('disabled', 'disabled');
        }
        else {
            $('#fb-status-msg').hide();
            $('#fb-email').removeAttr('disabled');
            $('#fb-message').removeAttr('disabled');
            $('#fb-btnSend').removeAttr('disabled');
        }
    }

    $("#fb-btnSend").click(function () {
        var subject = 'Quick Feedback';
        var email = $('#fb-email').val();
        var message = $('#fb-message').val();

        showHide_FB_Loading(true);
        $('#fb-status-msg').html("Sending...");

        $.ajax({
            dataType: "json",
            url: '/Static/ContactUs',
            type: 'POST',
            data: { subject: subject, email: email, description: message },
            success: function (data) {
                showHide_FB_Loading(false);
                if (data.isSuccess) {
                    $('#fb-status-msg').html("Message Sent!");
                    clearFBControl();
                }
                else{
                    
                }
            },
            error: function (xhr) {
                showHide_FB_Loading(false);                
            }
        });
    });
});
/*---------------- End Feedback Slider ------------------*/

var freeText = getParam('search');
if (freeText) {
    $('#header-search-box').val(freeText);
}

loadCategoryTree();

$('#header-search-box').keydown(function (event) {
    var keyCode = (event.keyCode ? event.keyCode : event.which);
    if (keyCode == 13) {
        $('#header-search-btn').trigger('click');
    }
});

$("#header-search-btn").click(function () {

    var catId = $('#header-category').val();
    var locId = '0';
    var searchText = $('#header-search-box').val();

    if (!catId) catId = 0;

    window.location.href = '/Product/Search?cat=' + catId + "&loc=" + locId + "&search=" + searchText;
});

function loadCategoryTree() {
    $.ajax({
        dataType: "json",
        contentType: 'application/json',
        url: '/Category/GetParentCategoryList',
        method: 'GET',
        async: true,
        data: {},
        success: function (itemList) {
            for (var i = 0; i < itemList.length; i++) {
                $('#header-category').append('<option value="' + itemList[i].Id + '">' + itemList[i].Name + '</option>');
            }

            // If query string has category then select it
            var catId = getParam('cat');
            if (catId && catId !== "0") {
                $('#header-category').val(catId);
            }

        },
        error: function (xhr) {
        }
    });
}

$(document).ready(function () {
    $('.changePassword').click(function () {
        $("#change-password-modal").modal('show');
    });
    $('#btnChangePasswordCancel').click(function () {
        $("#change-password-modal").modal('hide');
    });

    $('#btnChangePassword').click(function () {
        var currentPassword = $('#currentPassword').val();
        var newPassword = $('#newPassword').val();
        var confirmPassword = $('#confirmPassword').val();

        // Validation
        if (newPassword !== confirmPassword) {
            bootbox.alert("Confirm password don't match!", function () { });
            return;
        }

        // Check user validity
        $.ajax({
            dataType: "json",
            url: '/Security/IsValidUser',
            data: { password: currentPassword },
            method: 'POST',
            success: function (data) {
                if (data.isSuccess) {
                    $.ajax({
                        dataType: "json",
                        url: '/Security/ChangePassword',
                        data: { newPassword: newPassword },
                        method: 'POST',
                        //async: false,
                        success: function (data) {
                            if (data.isSuccess) {
                                clearForm();
                                bootbox.alert("<h4>Password has been changed sucessfully</h4>", function () { });
                            }
                            else {
                                clearForm();
                                bootbox.alert("<h4>Failed to change the password</h4>", function () { });
                            }
                        },
                        error: function (xhr) {
                            bootbox.alert("<h4>Error occured while changing password!</h4>", function () { });
                        }
                    });
                }
                else {
                    clearForm();
                    bootbox.alert("<h4>Current password is invalid!</h4>", function () { });
                }
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured while checking current password!</h4>", function () { });
            }
        });
    });
});

function clearForm() {
    $('#currentPassword').val('');
    $('#newPassword').val('');
    $('#confirmPassword').val('');
}


$(document).ready(function () {
    $('#btnUpdateUserInfo').click(function () {
        var name = $('#name').val();
        var email = $('#email').val();

        $.ajax({
            dataType: "json",
            url: '/Account/UpdateUserInfo',
            data: { name: name, email: email },
            method: 'POST',
            success: function (data) {
                if (data.isSuccess) {
                    bootbox.alert("<h4>User information has been updated sucessfully!</h4>", function () { });
                }
                else {
                    bootbox.alert("<h4>Failed to update!</h4>", function () { });
                }
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured while checking current password!</h4>", function () { });
            }
        });
    });
});


$(document).ready(function () {
    $('#btnChangeUsername').click(function () {

        var username = $('#username').val();

        $.ajax({
            dataType: "json",
            url: '/Account/ChangeUsername',
            data: { username: username },
            method: 'POST',
            async: true,
            success: function (data) {
                if (data.isSuccess) {
                    $('#divChangeUsername').hide();
                    $('#divVerifyMobile').show();

                    var scope = angular.element($("body")).scope();
                    scope.username = username;
                }
                else {
                    bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                }
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured!</h4>", function () { });
            }
        });
    });
});

// SERVICE CALL
app.factory('changeUsernameService', [
    '$http', function ($http) {

        return {
            verifyToken: function (token) {
                return $http({
                    url: '/Account/VerifyTokenFromChangeUsername',
                    method: 'POST',
                    params: { token: token }
                });
            },

            resendToken: function () {
                return $http({
                    url: '/Account/ResendToken',
                    method: 'POST',
                    params: {}
                });
            }
        };

    }
]);

// CONTROLLER
app.controller('ChangeUsernameCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'changeUsernameService', function ($rootScope, $scope, $http, $filter, $location, Enum, changeUsernameService) {
    
    $scope.numberOnly = function (e) {
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return;
        }
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }

    function showVerifyAccountLoader() {
        $('.verify-account-loading').show();
    }

    function hideVerifyAccountLoader() {
        $('.verify-account-loading').hide();
    }

    $scope.resendToken = function () {
        $('.resend-token-loading').show();
        changeUsernameService.resendToken()
            .success(function (data) {
                if (data.isSuccess) {
                } else {
                    bootbox.alert("<h4>Resending token failed!</h4>", function () { });
                }
                $('.resend-token-loading').hide();
            })
            .error(function (xhr) {
                $('.resend-token-loading').hide();
                bootbox.alert("<h4>Error: Resending token failed!</h4>", function () { });
            });
    }

    $scope.VerifyToken = function () {

        if (!$scope.Token) {
            bootbox.alert("<h4>Token is empty!</h4>", function () { });
            return;
        }

        showVerifyAccountLoader()
        setButtonState('btnVerifyToken', true);

        // Calling changeUsernameService
        changeUsernameService.verifyToken($scope.Token)
            .success(function (data) {
                if (data.isSuccess) {
                    window.location.href = '/Admin/Index';
                } else {
                    bootbox.alert("<h4>Invalid Token!</h4>", function () { });
                }

                setButtonState('btnVerifyToken', false);
                hideVerifyAccountLoader();
            })
            .error(function (xhr) {
                bootbox.alert("<h4>Error occured while verifying your token. Please contact with bdplace.com!</h4>", function () { });
                setButtonState('btnVerifyToken', false);
                hideVerifyAccountLoader();
            });

    }
}]);


$(document).ready(function () {

    var fromRegistration = getParam("fromReg");
    if (fromRegistration === 'yes') {
        $('#statusMsg').show();
    }

    $("#inputFile").change(function () {
        readURL(this);
    });

    $("#btnPhotoCancel").click(function () {
        $('#imgTemp').attr('src', '/Images/no-image.png');
        $('#divSavePhoto').hide();
    });

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgTemp').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);

            $('#divSavePhoto').show();
        }
    }
});

// SERVICE
app.factory('photoService', ['$http', function ($http) {

    return {
        savePhoto: function (productId, formData) {
            return $http.post('/Photo/SavePhoto?productId=' + productId, formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getPhotoList: function (productId) {
            return $http({
                url: '/Photo/GetPhotoList',
                method: 'GET',
                params: { productId: productId },
                cache: false
            });
        },

        setPrimaryPhoto: function (productId, photoId) {
            return $http({
                url: '/Photo/SetPrimaryPhoto',
                method: 'POST',
                data: { productId: productId, photoId: photoId }
            });
        },

        deletePhoto: function (photoId) {
            return $http({
                url: '/Photo/DeletePhoto',
                method: 'Get',
                params: { imageId: photoId }
            });
        }


    };

}
]);

// CONTROLLER
app.controller('photoCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'photoService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, photoService) {

    var productId = getParam('id');
    $scope.IsFileValid = false;

    loadPhotos();

    function loadPhotos() {
        photoService.getPhotoList(productId)
            .success(function (data) {
                $scope.photoList = data;
            })
            .error(function (xhr) {
            });
    };
    
    $scope.selectPhoto = function (files) {
        $scope.memberPhoto = files[0];
    };

    $scope.setPrimaryPhoto = function (productId, photoId) {
        photoService.setPrimaryPhoto(productId, photoId)
            .success(function (data) {
                loadPhotos();
            })
            .error(function (exception) {
                
            });
    }

    $scope.deletePhoto = function (photoId) {
        bootbox.confirm("<h4>Are you sure to delete this image?</h4>",
            function (result) {
                if (result) {
                    photoService.deletePhoto(photoId)
                        .success(function (data) {
                            if (data.isSuccess) {
                                loadPhotos();
                            }
                            else {
                                bootbox.alert("<h4>Failed to delete this image!</h4>", function () { });
                            }
                        })
                        .error(function (exception) {
                            bootbox.alert("<h4>Error occured while deleting this image!</h4>", function () { });
                        });
                }
            });
    }

    $scope.uploadPhoto = function (whosPhoto) {
        $scope.submitted = true;

        if ($scope.myForm.$invalid) {
            return false;
        }

        savePhoto();
    };

    var savePhoto = function () {
        var file = $scope.memberPhoto;

        $scope.CheckFile(file);
        if (!$scope.IsFileValid) {
            return false;
        }

        var formData = new FormData();
        formData.append("file", file);

        photoService.savePhoto(productId, formData)
        .success(function (data) {
            if (data.isSuccess) {
                loadPhotos();

                $('#imgTemp').attr('src', '/Images/no-image.png');
                $('#divSavePhoto').hide();

            }
            else {
                bootbox.alert("<h4>" + data.message + "</h4>", function () { });
            }
        })
        .error(function (exception) {
            bootbox.alert("<h4>Error while saving your photo!</h4>", function () { });
        });

    };

    //File type(images) validation
    $scope.CheckFile = function (file) {
        $scope.IsFileValid = false;
        if (file != null) {
            if ((file.type == 'image/gif' || file.type == 'image/png' || file.type == 'image/jpeg') && file.size <= (4096 * 1024)) { // limit photo size to 4 mb
                $scope.FileInvalidMessage = "";
                $scope.IsFileValid = true;
            }
            else {
                $scope.IsFileValid = false;
                bootbox.alert("<h4>Invalid file is selected. (File format must be gif or png or jpeg. Maximum file size 4 mb)</h4>", function () { });
            }
        }
        else {
            bootbox.alert("Please choose product image!", function () { });
        }
    };
}]);
$(document).ready(function () {

    var fromRegistration = getParam("fromReg");
    if (fromRegistration === 'yes') {
        $('#statusMsg').show();
    }

    $("#inputFile").change(function () {
        readURL(this);
    });

    $("#btnPhotoCancel").click(function () {
        $('#imgTemp').attr('src', '/Images/no-image.png');
        $('#divSavePhoto').hide();
    });

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgTemp').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);

            $('#divSavePhoto').show();
        }
    }
});

// SERVICE
app.factory('siteLogoService', ['$http', function ($http) {

    return {
        saveSiteLogo: function (formData) {
            return $http.post('/Photo/SaveLogo', formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },
        
        deletePhoto: function () {
            return $http({
                url: '/Photo/DeleteSiteLogo',
                method: 'POST',
                data: {}
            });
        }


    };

}
]);

// CONTROLLER
app.controller('siteLogoCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'siteLogoService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, siteLogoService) {

    $scope.IsFileValid = false;

    loadPhotos();

    function loadPhotos() {
    
    };
    
    $scope.selectPhoto = function (files) {
        $scope.siteLogo = files[0];
    };
    
    $scope.deletePhoto = function () {
        bootbox.confirm("<h4>Are you sure to delete this logo?</h4>",
            function (result) {
                if (result) {
                    siteLogoService.deletePhoto()
                        .success(function (data) {
                            if (data.isSuccess) {
                                loadPhotos();
                            }
                            else {
                                bootbox.alert("<h4>Failed to delete this logo!</h4>", function () { });
                            }
                        })
                        .error(function (exception) {
                            bootbox.alert("<h4>Error occured while deleting this logo!</h4>", function () { });
                        });
                }
            });
    }

    $scope.uploadPhoto = function (whosPhoto) {
        $scope.submitted = true;

        if ($scope.myForm.$invalid) {
            return false;
        }

        savePhoto();
    };

    var savePhoto = function () {
        var file = $scope.siteLogo;

        $scope.CheckFile(file);
        if (!$scope.IsFileValid) {
            return false;
        }

        var formData = new FormData();
        formData.append("file", file);

        siteLogoService.saveSiteLogo(formData)
        .success(function (data) {
            if (data.isSuccess) {
                loadPhotos();

                var seconds = new Date().getTime() / 1000;

                $('#imgTemp').attr('src', '/Images/Logo/Logo.png?v=' + seconds);
                $('#divSavePhoto').hide();

            }
            else {
                bootbox.alert("<h4>" + data.message + "</h4>", function () { });
            }
        })
        .error(function (exception) {
            bootbox.alert("<h4>Error while saving site logo!</h4>", function () { });
        });

    };

    //File type(images) validation
    $scope.CheckFile = function (file) {
        $scope.IsFileValid = false;
        if (file != null) {
            if ((file.type == 'image/gif' || file.type == 'image/png' || file.type == 'image/jpeg') && file.size <= (4096 * 1024)) { // limit photo size to 4 mb
                $scope.FileInvalidMessage = "";
                $scope.IsFileValid = true;
            }
            else {
                $scope.IsFileValid = false;
                bootbox.alert("<h4>Invalid file is selected. (File format must be gif or png or jpeg. Maximum file size 4 mb)</h4>", function () { });
            }
        }
        else {
            bootbox.alert("Please choose product image!", function () { });
        }
    };
}]);
$(document).ready(function () {

    window.filterLocIds = '';
    window.locFilters = [];
    window.locFilters.push({ level: 0, id: 0, name: 'All Locations' });

    window.filterCatIds = '';
    window.catFilters = [];
    window.catFilters.push({ level: 0, id: 0, name: 'All Categories' });

    var isLoad = getParam('cat');
    if (isLoad) {
        loadCategoryTree();                
        buildCatSelectionText();
    }

    loadAttributes();
        
    var categoryList = [];
    var locationList = [];

    function loadCategoryTree() {

        var loader = $('.category-loader');
        loader.show();

        $.ajax({
            dataType: "json",
            url: '/Category/GetCategoryTree',
            success: function (recordSet) {
                categoryList = recordSet;
                load_category();

                // If search by header search box
                var catId = getParam('cat');
                if (catId && catId !== "0") {
                    var catName = '';
                    for (var i = 0; i < categoryList.length; i++) {
                        var item = categoryList[i];
                        if (item.Id === parseInt(catId, 10)) {
                            catName = (item.name) ? item.name : item.Name;
                            break;
                        }
                    }

                    RenderCategoryById(catId, catName, true);
                }

                loader.hide();
            },
            error: function (xhr) {
                loader.hide();
            }
        });
    }    

    function load_category(catList) {
        if (!catList) {
            catList = getRootCategory();
        }

        $.each(catList, function (index, item) {
            var catId = (item.id) ? item.id : item.Id;
            var catName = (item.name) ? item.name : item.Name;

            $('#category-filter').append('<li><a class="cat-area" href="#" catId="' + catId + '">' + catName + '</a></li>');
        });
    }

    $('body').on('click', '.filter-colors', function () {
        var colorAttr = '';
        $('#colors input:checked').each(function () {
            colorAttr += this.value + ',';
        });

        window.colorAttr = colorAttr;        
        refineSearch();
    });

    $('body').on('click', '.filter-sizes', function () {
        var sizeAttr = '';
        $('#sizes input:checked').each(function () {
            sizeAttr += this.value + ',';
        });

        window.sizeAttr = sizeAttr;        
        refineSearch();
    });

    function loadAttributes() {

        var loader = $('.category-loader');
        loader.show();

        $.ajax({
            dataType: "json",
            url: '/Attribute/GetAttributeNameList',
            success: function (recordSet) {

                var list = recordSet;

                var colors = '';
                var sizes = '';

                for (var i = 0; i < list.length; i++) {
                    if (list[i].Name === 'Color') {
                        colors = list[i].Value;
                    }

                    if (list[i].Name === 'Size') {
                        sizes = list[i].Value;
                    }
                }

                var colorList = colors.split(',');
                $.each(colorList, function (index) {
                    $('#colors').append("<div class='clearfix' style='margin-bottom:5px;'><input class='filter-colors' type='checkbox' value='" + colorList[index] + "' />" + "<div class='attrColor " + colorList[index].toLowerCase() + "'></div> &nbsp; " + colorList[index] + " </div>");
                });

                var sizeList = sizes.split(',');
                $.each(sizeList, function (index) {
                    $('#sizes').append("<div class='clearfix' style='margin-bottom:5px;'> <input class='filter-sizes' type='checkbox' value='" + sizeList[index] + "' /> <span style='font-weight: 500;position: relative;top: -2px;margin-left:2px;'>" + sizeList[index] + "</span> </div>");
                });


                loader.hide();
            },
            error: function (xhr) {
                loader.hide();
            }
        });
    } 
    
    function setFilterIds_category_location(id, isCategory) {

        if (isCategory) {
            window.filterCatIds = '';
            var obj = getCategory(id);
            getChildIds(obj, true);

            if (window.filterCatIds) {
                window.filterCatIds = window.filterCatIds + id;
            }
            else {
                window.filterCatIds = id;
            }
        }
        else {
            window.filterLocIds = '';
            var obj = getLocation(id);
            getChildIds(obj, false);

            if (window.filterLocIds) {
                window.filterLocIds = window.filterLocIds + id;
            }
            else {
                window.filterLocIds = id;
            }
        }
    }

    function RenderCategoryById(catId, catName, isOnLoad) {

        // Set category filter
        setFilterIds_category_location(catId, true);

        // Refine search
        if (!isOnLoad) {
            refineSearch();
        }

        clearList(true);

        getChildList(parseInt(catId, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            load_category(window.subCatList);
        }

        window.catFilters.push({ level: window.catFilters.length, id: catId, name: catName });

        buildCatSelectionText();
    }

    function refineSearch() {
        angular.element($('#searchCtl')).scope().refineSearch();
    }        

    $(".cat-area").live("click", function () {
        var catId = $(this).attr('catId');
        var catName = $(this).html();
        
        RenderCategoryById(catId, catName, false);        
    });

    function buildCatSelectionText(catLevel) {

        $('#category-filter-selection').html('');

        var count = 0;
        $.each(window.catFilters, function (index, item) {

            var paddingLeft = count * 10;

            if (catLevel) {
                if (item.level <= parseInt(catLevel, 10)) {
                    $('#category-filter-selection').append('<li class="icon-left-open-big" style="padding-left:' + paddingLeft + 'px; position:relative; left:-5px;" ><a class="cat-area-selection" href="#" catId="' + item.id + '" catLevel="' + item.level + '" >' + item.name + '</a></li>');
                }
            } else {
                $('#category-filter-selection').append('<li class="icon-left-open-big" style="padding-left:' + paddingLeft + 'px; position:relative; left:-5px;" ><a class="cat-area-selection" href="#" catId="' + item.id + '" catLevel="' + item.level + '" >' + item.name + '</a></li>');
            }

            count++;
        });

        $('#category-filter').css('padding-left', (window.catFilters.length * 10) + 12);

        $('#category-filter-selection').removeClass('filter-cat-selected');
        $("li", $('#category-filter-selection')).last().addClass('filter-cat-selected');
    }

    $(".cat-area-selection").live("click", function () {
        var catId = $(this).attr('catId');
        var catLevel = $(this).attr('catLevel');
        var catName = $(this).html();
        
        // Set category filter
        setFilterIds_category_location(catId, true);

        // Refine search
        refineSearch();

        clearList(true);

        if (parseInt(catLevel, 10) === 0) {
            load_category();
        }
        else {
            getChildList(parseInt(catId, 10), true);
            if (window.subCatList && window.subCatList.length > 0) {
                load_category(window.subCatList);
            }
        }

        // Remove useless text
        var newList = [];

        $.each(window.catFilters, function (index, item) {
            if (item.level <= parseInt(catLevel, 10)) {
                newList.push(item);
            }
        });

        if (newList.length === 0) {
            newList.push({ level: 0, id: 0, name: 'All Categories' });
        }

        window.catFilters = newList;

        buildCatSelectionText(catLevel);
    });
    
    $('#itemSortOrder').on('change', function () {
        refineSearch();
    });

    function clearList(isCategory) {

        if (isCategory) {
            $('#category-filter').html('');
            
        } else {
            $('#location-filter').html('');
        }
    }

    function populateListControls(id, items) {
        var list = $("#" + id);
        list.empty();
        list.show();
        $.each(items, function (index, item) {
            list.append(new Option(item.Name, item.Id));
        });
    }

    function getRootCategory() {
        var rootCatList = [];
        if (categoryList && categoryList.length > 0) {
            for (var i = 0; i < categoryList.length; i++) {
                if (!categoryList[i].ParentId) {
                    rootCatList.push({ id: categoryList[i].Id, name: categoryList[i].Name });
                }
            }
        }
        return rootCatList;
    }

    function getChildIds(obj, isCategory) {

        if (obj) {
            if (isCategory) {
                if (obj.ChildCategories && obj.ChildCategories.length > 0) {
                    for (var i = 0; i < obj.ChildCategories.length; i++) {
                        window.filterCatIds += obj.ChildCategories[i].Id + ',';
                        getChildIds(obj.ChildCategories[i], isCategory);
                    }
                }
            }            
        }
    }

    function getCategory(id) {
        for (var i = 0; i < categoryList.length; i++) {
            if (categoryList[i].Id === parseInt(id, 10)) {
                return categoryList[i];
            }
        }
    }

    function getChildList(id, isCategory) {

        if (isCategory) {
            var childCatList = [];
            for (var i = 0; i < categoryList.length; i++) {
                if (categoryList[i].Id === id) {
                    window.subCatList = categoryList[i].ChildCategories;
                    return categoryList[i].ChildCategories;
                } else {
                    childCatList = getChilds(categoryList[i], id, isCategory);
                }
            }
            return childCatList;
        }        
    }

    function getChilds(obj, id, isCategory) {

        if (isCategory) {
            if (obj.Id === id) {
                window.subCatList = obj.ChildCategories;
                return obj.ChildCategories;
            }
            else {
                if (obj.ChildCategories) {
                    for (var i = 0; i < obj.ChildCategories.length; i++) {
                        getChilds(obj.ChildCategories[i], id, isCategory);
                    }
                }
            }
        }        
    }
    
});


// SERVICE CALL
app.factory('productSearchService', [
    '$http', function ($http) {

        return {
            searchResult: function (searchModel) {
                return $http({
                    url: '/Product/SearchResult',
                    method: 'POST',
                    data: searchModel
                });
            }
        };

    }
]);

// CONTROLLER
app.controller('ProductSearchCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'productSearchService', function ($rootScope, $scope, $http, $filter, $location, Enum, productSearchService) {

    var catId = getParam('cat');    
    var freeText = getParam('search');
    var onlyDiscount = getParam('discount');

    var searchModel = {};
    if (freeText) {
        searchModel.FreeText = freeText;
    }
    if (onlyDiscount) {
        searchModel.OnlyDiscount = true;
    }
    if (catId !== "0") {
        searchModel.CategoryId = catId;
    }
    
    searchModel.PageNo = 1;    

    $scope.searchModel = searchModel;    

    // Search profiles
    searchProduct(searchModel, true);

    function Load_SearchItems(productList) {

        $('.grid-item', '#search-item-container').remove();
        for (var i = 0; i < productList.length; i++) {
           
            var addToCartAttr = 'productId="' + productList[i].Id + '" name="' + productList[i].Title + '" price="' + productList[i].RetailPrice + '" imageUrl="' + productList[i].PrimaryImageName + '"';

            var plus_attr = 'id="btnPlus_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
            var minus_attr = 'id="btnMinus_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
            var qty_attr = 'id="txtQty_' + productList[i].Id + '" productId="' + productList[i].Id + '"';

            $('#search-item-container').append(
                '<div class="grid-item"> ' +
                '<div class="div-item-container">' +
                '<a class="item-link-container" href="/Product/Details?id=' + productList[i].Id + '&t=' + productList[i].TitleSEO + '"> ' +
                '<div class="grid-item-image"> ' +
                '<img src="' + productList[i].PrimaryImageName + '" /> ' +
                '</div> ' +
                '<div class="grid-item-info"> ' +
                '<span class="h-p-title center">' + productList[i].Title + '</span> ' +
                '<div class="center"> ' +
                '<span class="old-price">' + productList[i].PriceTextOld + '</span>' + '<span class="h-p-price">' + productList[i].PriceText + '</span>' +
                '</div> ' +

                //'<div class="center"> ' +

                //    '<div class="btn-qty-container">' +
                //        '<button ' + minus_attr + ' class="btn-minus btn btn-default">-</button>' +
                //        '<input ' + qty_attr + ' type="text" value="1" class="txtQty form-control" style="    background-color: #ebebeb !important;"> ' +
                //        '<button ' + plus_attr + ' class="btn-plus btn btn-default">+</button>' +
                //    '</div>' +

                //    '<div class="item-basket">' +
                //        '<img ' + addToCartAttr + ' class="h-cart home-add-to-cart" title="Add to cart" src="/images/basket.png" style="float:right;" />' +
                //    '</div>' +

                //'</div> ' +

                '</div> ' +
                '</a> ' +
                '</div>' +
                '</div> ');
        }            
    }

    $('#search-item-container').on('click', '.btn-plus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_' + productId).val();
        var newQty = parseInt(qty, 10) + 1;

        $('#txtQty_' + productId).val(newQty);
        event.preventDefault();
    });

    $('#search-item-container').on('click', '.btn-minus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_' + productId).val();

        var newQty = parseInt(qty, 10) - 1;

        if (newQty >= 1) {
            $('#txtQty_' + productId).val(newQty);
        }

        event.preventDefault();
    });

    $('#search-item-container').on('click', '.home-add-to-cart', function (event) {
        var productId = $(this).attr('productId');
        var name = $(this).attr('name');
        var price = $(this).attr('price');
        var imageUrl = $(this).attr('imageUrl');
        var qty = $('#txtQty_' + productId).val();

        addToCart('', productId, name, qty, price, imageUrl);
        event.preventDefault();

        animateAddToCart(this);
    });

    $scope.register = function () {
        window.location.href = '/Account/Register';
    }

    $scope.expandCollapse = function (type) {
        if (type === 'price') {
            var container = $('.price-filter');

            if ($(container).is(":visible")) {
                $('.price-icon-showhide').removeClass('icon-minus-3').addClass('icon-plus-3');
            }
            else {
                $('.price-icon-showhide').removeClass('icon-plus-3').addClass('icon-minus-3');
            }

            container.slideToggle();
        }        
        else if (type === 'category') {
            var container = $('.category-filter');
            if ($(container).is(":visible")) {
                $('.category-icon-showhide').removeClass('icon-minus-3').addClass('icon-plus-3');
            }
            else {
                $('.category-icon-showhide').removeClass('icon-plus-3').addClass('icon-minus-3');
            }
            container.slideToggle();
        }     
        else if (type === 'color') {
            var container = $('.color-filter');
            if ($(container).is(":visible")) {
                $('.color-icon-showhide').removeClass('icon-minus-3').addClass('icon-plus-3');
            }
            else {
                $('.color-icon-showhide').removeClass('icon-plus-3').addClass('icon-minus-3');
            }
            container.slideToggle();
        }     
        else if (type === 'size') {
            var container = $('.size-filter');
            if ($(container).is(":visible")) {
                $('.size-icon-showhide').removeClass('icon-minus-3').addClass('icon-plus-3');
            }
            else {
                $('.size-icon-showhide').removeClass('icon-plus-3').addClass('icon-minus-3');
            }
            container.slideToggle();
        }     
    }

    function showLoader() {
        $('.search-loading').show();
        $('.search-result').hide();
        $('.no-record-found').hide();
        $('.product-search-result').remove();
    }
    function hideLoader() {
        $('.search-loading').hide();
        $('.search-result').show();
    }
    
    $scope.closeWrapper = function () {
        $('.searchlist-action-wrapper').hide();
    }

    $scope.viewFullProfile = function (userId) {

        // Check user account status
        var userStatus = getUserStatus();
        if (!userStatus.isLoggedIn) {
            $("#loginModal").modal();
            return;
        }
        else if (!userStatus.isVerified) {
            bootbox.alert("<h4>Your account is not verified yet. Its under verification process!</h4>", function () { });
            return;
        }

        // Go to profile details page
        window.location.href = '/Product/Details/?id=' + userId;
    }   

    $scope.priceFilter = function () {
        $scope.refineSearch();
    }

    $scope.refineSearch = function () {
        var searchModel = {};
        searchModel.FreeText = '';
        
        if (window.filterCatIds && window.filterCatIds !== "0") { searchModel.CategoryId = window.filterCatIds; }

        // Sort order
        var sortOrder = $('#itemSortOrder').val();
        searchModel.SortOrder = sortOrder;
               
        // Price
        searchModel.MinPrice = $scope.MinPrice;
        searchModel.MaxPrice = $scope.MaxPrice
        
        searchModel.PageNo = 1;

        // Color & Size attribute
        searchModel.ColorAttr = window.colorAttr;
        searchModel.SizeAttr = window.sizeAttr;
        
        $scope.searchModel = searchModel;

        // Search profiles
        searchProduct(searchModel, true);
    }

    function renderSearchResultHeading(totalRecords) {

        var resultText = "";
        var searchText = $('#header-search-box').val();

        if (searchText) {
            resultText = "Total <b>" + totalRecords + "</b> records found for <b>" + searchText + "</b>";
        }
        else {
            resultText = "Total <b>" + totalRecords + "</b> records found";
        }

        $('.search-criteria').html(resultText);
    }

    function searchProduct(searchModel, isRenderPaging) {
        
        $("html, body").animate({ scrollTop: 0 }, "fast");

        showLoader();

        searchModel.IsGetTotalRecord = isRenderPaging;

        productSearchService.searchResult(searchModel)
        .success(function (data) {

            Load_SearchItems(data.recordList);

            $scope.searchResult = data.recordList;
            hideLoader();

            renderSearchResultHeading(data.totalRecords);

            if (data.recordList.length > 0) {                
                if (isRenderPaging) {
                    $('#pagination-ul').remove();
                    $('.pagination-container').html('<ul id="pagination-ul" class="pagination-md"></ul>').show();

                    $('#pagination-ul').twbsPagination({
                        totalPages: data.totalPages,
                        visiblePages: 9,
                        initiateStartPageClick: false,
                        onPageClick: function (event, pageNo) {
                            $scope.searchModel.PageNo = pageNo;
                            searchProduct($scope.searchModel, false);
                        }
                    });
                }
            }
            else {
                $('.pagination-container').hide();
                $('.no-record-found').show();
            }
        })
        .error(function (xhr) {
            hideLoader();
            bootbox.alert("<h4>Error to get search records!</h4>", function () { });
        });
    }
}]);
$(document).ready(function () {

    function showHideLoading(show) {
        if (show) {
            $('.status-msg').show();
            $('#email').attr('disabled', 'disabled');
            $('#btnSendPassword').attr('disabled', 'disabled');
        }
        else {
            $('.status-msg').hide();
            $('#email').removeAttr('disabled');
            $('#btnSendPassword').removeAttr('disabled');
        }
    }

    $(".forgotPassword").click(function () {

        var model = {};
        model.Username = $('#mobile').val();

        showHideLoading(true);

        $.ajax({
            dataType: "json",
            url: '/Security/ForgotPassword',
            type: 'POST',
            data: model,
            success: function (data) {
                showHideLoading(false);
                if (data.isSuccess) {
                    bootbox.alert("<br /><h4>Your password has been send to your email account. Please check your email.</h4><br />", function () { });                    
                }
                else {
                    if (data.message) {
                        bootbox.alert("<h4>"+ data.message +"</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Failed to send password! Please contact with bdplace.com</h4>", function () { });
                    }
                }
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured while sending your password! Please contact with bdplace.com</h4>", function () { });
                showHideLoading(false);
            }
        });
    });

});
$(document).ready(function () {

    allowGuestCheckout();

    function showHideLoading(show) {
        if (show) {
            $('.logging').show();
            $('#username').attr('disabled', 'disabled');
            $('#password').attr('disabled', 'disabled');
            $('#loginBtn').attr('disabled', 'disabled');
            $('.message').removeClass('error-message');
        }
        else {
            $('.logging').hide();
            $('#username').removeAttr('disabled');
            $('#password').removeAttr('disabled');
            $('#loginBtn').removeAttr('disabled');
        }
    }

    function allowGuestCheckout() {
        var param = getParam("returnUrl");
        if (param === '/cart') {
            $('#checkoutGuest').show();
        }
    }

    $("#register").click(function (event) {
        window.location.href = '/Account/Register';
    });

    $("#password").keyup(function (event) {
        if (event.keyCode == 13) {
            $(".login").click();
        }
    });

    $(".login").click(function () {
        var returnUrl = getParam('returnUrl');

        var model = {};
        model.Username = $('#username').val();
        model.Password = $('#password').val();
        model.RememberMe = $('#rememberMe').is(":checked") ? true : false;
        model.ReturnUrl = returnUrl;

        showHideLoading(true);        

        $.ajax({
            dataType: "json",
            url: '/Security/Login',
            type: 'POST',
            data: model,
            success: function (data) {
                showHideLoading(false);
                if (data.isSuccess) {

                    if (returnUrl) {
                        window.location.href = returnUrl;
                    }
                    else {
                        window.location.href = data.redirectUrl;
                    }
                }
                else {
                    $('.message').addClass('login-error').html(data.message);
                }
            },
            error: function (xhr) {
                $('.message').addClass('login-error').html('Operation Failed!');
                showHideLoading(false);
            }
        });
    });

});
$(document).ready(function () {

    function showHideLoading(show) {
        if (show) {
            $('.status-msg').show();
            $('#name').attr('disabled', 'disabled');
            $('#contactNumber').attr('disabled', 'disabled');
            $('#message').attr('disabled', 'disabled');
            $('#btnSend').attr('disabled', 'disabled');
        }
        else {
            $('.status-msg').hide();
            $('#name').removeAttr('disabled');
            $('#contactNumber').removeAttr('disabled');
            $('#message').removeAttr('disabled');
            $('#btnSend').removeAttr('disabled');
        }
    }

    function clearControl() {
        $('#name').val('');
        $('#contactNumber').val('');
        $('#message').val('');
    }

    $("#btnSend").click(function () {

        var name = $('#name').val();
        var phone = $('#contactNumber').val();
        var message = $('#message').val();

        showHideLoading(true);

        $.ajax({
            dataType: "json",
            url: '/Static/ContactUs',
            type: 'POST',
            data: { name: name, phone: phone, message: message },
            success: function (data) {
                showHideLoading(false);
                if (data.isSuccess) {
                    var hotlineNumber = data.hotlineNumber;
                    bootbox.alert("<h4>Your message has been posted successfully!. We will contact with you shortly. <br/>If it is urgent then you can call us to <b>"+ hotlineNumber +"</b> </h4>", function () { });
                    clearControl();
                }
                else {
                    bootbox.alert("<h4>Failed to post your message!</h4>", function () { });
                }
            },
            error: function (xhr) {
                showHideLoading(false);
            }
        });
    });

});
$(document).ready(function () {

    var isLoad = getParam('load');
    if (isLoad) {
        loadCategoryTree();      
    }

    var categoryList = [];

    function loadCategoryTree() {
        $.ajax({
            dataType: "json",
            contentType: 'application/json',
            url: '/Category/GetCategoryTree',
            method: 'GET',
            async: true,
            data: {},
            success: function (recordSet) {
                categoryList = recordSet;
                load_category();
            },
            error: function (xhr) {
            }
        });
    }    
        
    $("#inputFile1").change(function () {                
        readURL11(this);
    });

    $("#inputFile2").change(function () {
        readURL11(this);
    });

    $("#inputFile3").change(function () {
        readURL11(this);
    });

    $("#inputFile4").change(function () {
        readURL11(this);
    });

    $("#inputFile5").change(function () {
        readURL11(this);
    });

    $("#inputFile6").change(function () {
        readURL11(this);
    });

    $("#btnPhotoCancel1").click(function () {
        $('#productImage1').attr('src', '');
        $('#productImage1').hide();
        $("#btnPhotoCancel1").hide();
        $('.btn-upload-1').css('visibility', 'visible')
    });

    $("#btnPhotoCancel2").click(function () {
        $('#productImage2').attr('src', '');
        $('#productImage2').hide();
        $("#btnPhotoCancel2").hide();
        $('.btn-upload-2').css('visibility', 'visible')
    });

    $("#btnPhotoCancel3").click(function () {
        $('#productImage3').attr('src', '');
        $('#productImage3').hide();
        $("#btnPhotoCancel3").hide();
        $('.btn-upload-3').css('visibility', 'visible')
    });

    $("#btnPhotoCancel4").click(function () {
        $('#productImage4').attr('src', '');
        $('#productImage4').hide();
        $("#btnPhotoCancel4").hide();
        $('.btn-upload-4').css('visibility', 'visible')
    });

    $("#btnPhotoCancel5").click(function () {
        $('#productImage5').attr('src', '');
        $('#productImage5').hide();
        $("#btnPhotoCancel5").hide();
        $('.btn-upload-5').css('visibility', 'visible')
    });

    $("#btnPhotoCancel6").click(function () {
        $('#productImage6').attr('src', '');
        $('#productImage6').hide();
        $("#btnPhotoCancel6").hide();
        $('.btn-upload-6').css('visibility', 'visible')
    });

    function readURL(input, imageId) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#' + imageId).attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);            
        }
    }

    function readURL11(input) {
        if ($('#productImage1').attr('src') === '') {
            setImage(input, 'productImage1');
            $('.btn-upload-1').css('visibility', 'hidden')
        }
        else if ($('#productImage2').attr('src') === '') {
            setImage(input, 'productImage2');
            $('.btn-upload-2').css('visibility', 'hidden')
        }
        else if ($('#productImage3').attr('src') === '') {
            setImage(input, 'productImage3');
            $('.btn-upload-3').css('visibility', 'hidden')
        }
        else if ($('#productImage4').attr('src') === '') {
            setImage(input, 'productImage4');
            $('.btn-upload-4').css('visibility', 'hidden')
        }
        else if ($('#productImage5').attr('src') === '') {
            setImage(input, 'productImage5');
            $('.btn-upload-5').css('visibility', 'hidden')
        }
        else if ($('#productImage6').attr('src') === '') {
            setImage(input, 'productImage6');
            $('.btn-upload-6').css('visibility', 'hidden')
        }
    }

    function setImage(input, imageId) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#' + imageId).attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);

            // Show cancel button
            $('#' + imageId.replace('productImage', 'btnPhotoCancel')).show();

            // Show the image
            $('#' + imageId).show();
        }
    }    

    $('#oneSelect').on('change', function () {
        clearList(1, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('twoSelect', window.subCatList);
        }
        else {
            setSelectedText(1, true);            
            window.selectedCategoryId = this.value;
        }
    });

    $('#twoSelect').on('change', function () {
        clearList(2, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('threeSelect', window.subCatList);
        }
        else {
            setSelectedText(2, true);            
            window.selectedCategoryId = this.value;
        }
    });

    $('#threeSelect').on('change', function () {
        clearList(3, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('fourSelect', window.subCatList);
        }
        else {
            setSelectedText(3, true);            
            window.selectedCategoryId = this.value;
        }
    });

    $('#fourSelect').on('change', function () {
        setSelectedText(4, true);        
        window.selectedCategoryId = this.value;
    });    

    $('#btnCategoryContinue').on('click', function () {
        $('.selectedCategoryText').html(window.selectedCategoryText);
        
        $('.cat-edit-section').show();
        $('.cat-continue-section').hide();
        $('.category-picker').hide();
    });

    $('#btnEditCategory').on('click', function () {

        $('.cat-edit-section').hide();
        $('.cat-continue-section').show();
        $('.category-picker').show();        
    });    

    function clearList(number, isCategory) {

        if (isCategory) {
            disableButton('btnCategoryContinue');
            if (number === 1) {
                $('#twoSelect').empty();
                $('#threeSelect').empty();
                $('#fourSelect').empty();
            }
            else if (number === 2) {
                $('#threeSelect').empty();
                $('#fourSelect').empty();
            }
            else if (number === 3) {
                $('#fourSelect').empty();
            }
        }
    }

    function populateListControls(id, items) {
        var list = $("#" + id);
        list.empty();
        list.show();        
        $.each(items, function (index, item) {
            list.append(new Option(item.Name, item.Id));
        });
    }    

    function getRootCategory() {
        var rootCatList = [];
        if (categoryList && categoryList.length > 0) {
            for (var i = 0; i < categoryList.length; i++) {
                rootCatList.push({ id: categoryList[i].Id, name: categoryList[i].Name });
            }
        }
        return rootCatList;
    }

    function getChildList(id, isCategory) {

        if (isCategory) {
            var childCatList = [];
            for (var i = 0; i < categoryList.length; i++) {
                if (categoryList[i].Id === id) {
                    window.subCatList = categoryList[i].ChildCategories;
                    return categoryList[i].ChildCategories;
                } else {
                    childCatList = getChilds(categoryList[i], id, isCategory);
                }
            }
            return childCatList;
        }
        else {
            var childLocList = [];
            for (var i = 0; i < locationList.length; i++) {
                if (locationList[i].Id === id) {
                    window.subLocList = locationList[i].ChildLocations;
                    return locationList[i].ChildLocations;
                } else {
                    childLocList = getChilds(locationList[i], id, isCategory);
                }
            }
            return childLocList;
        }
    }

    function getChilds(obj, id, isCategory) {
        
        if (isCategory) {
            if (obj.Id === id) {
                window.subCatList = obj.ChildCategories;
                return obj.ChildCategories;
            }
            else {
                if (obj.ChildCategories) {
                    for (var i = 0; i < obj.ChildCategories.length; i++) {
                        getChilds(obj.ChildCategories[i], id, isCategory);
                    }
                }
            }
        }
        else {
            if (obj.Id === id) {
                window.subLocList = obj.ChildLocations;
                return obj.ChildLocations;
            }
            else {
                if (obj.ChildLocations) {
                    for (var i = 0; i < obj.ChildLocations.length; i++) {
                        getChilds(obj.ChildLocations[i], id, isCategory);
                    }
                }
            }
        }
    }

    function setSelectedText(controlId, isCategory) {

        if (isCategory) {
            window.selectedCategoryText = '';
            if (controlId === 1) {
                window.selectedCategoryText = $("#oneSelect option:selected").text();
            }
            else if (controlId === 2) {
                window.selectedCategoryText = $("#oneSelect option:selected").text() + ' / ' + $("#twoSelect option:selected").text();
            }
            else if (controlId === 3) {
                window.selectedCategoryText = $("#oneSelect option:selected").text() + ' / ' + $("#twoSelect option:selected").text() + ' / ' + $("#threeSelect option:selected").text();
            }
            else if (controlId === 4) {
                window.selectedCategoryText = $("#oneSelect option:selected").text() + ' / ' + $("#twoSelect option:selected").text() + ' / ' + $("#threeSelect option:selected").text() + ' / ' + $("#fourSelect option:selected").text();
            }
            activateButton('btnCategoryContinue');
        }        
    }
    function activateButton(id) {
        $('#' + id).prop("disabled", false);
        $('#' + id).addClass('btn-active');
        $('#' + id).removeClass('btn-disable');
    }
    function disableButton(id) {
        $('#' + id).prop("disabled", true);
        $('#' + id).removeClass('btn-active');
        $('#' + id).addClass('btn-disable');
    }

    function load_category() {

        // Load root categories
        var catItems = getRootCategory();
        var catBox = $("#oneSelect");
        $.each(catItems, function (index, item) {
            catBox.append(new Option(item.name, item.id));
        });        
    }

    window.subCatList = [];
    window.selectedCategoryText = '';
    window.selectedCategoryId = '';
});

// SERVICE
app.factory('postProductService', ['$http', function ($http) {

    return {
        postProduct: function (product, formData) {

            formData.append('product', JSON.stringify(product));

            return $http.post('/ProductEntry/PostProduct', formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getPhotoList: function () {
            return $http({
                url: '/Photo/GetPhotoList',
                method: 'GET',
                cache: false
            });
        },

        setProfilePhoto: function (photoId) {
            return $http({
                url: '/Photo/SetProfilePhoto',
                method: 'POST',
                data: { photoId: photoId }
            });
        },

        deletePhoto: function (photoId) {
            return $http({
                url: '/Photo/DeletePhoto',
                method: 'POST',
                data: { photoId: photoId }
            });
        },
        getBranchList: function () {
            return $http.get('/Branch/GetUserBranchList');
        },
        getSupplierList: function () {
            return $http.get('/Supplier/GetSupplierList');
        },
        getItemtypeList: function () {
            return $http.get('/ItemType/GetItemTypeList');
        },
        getColorList: function () {
            return $http.get('/Lookup/GetLookups?name=color');
        },
        getConditionList: function () {
            return $http.get('/Lookup/GetLookups?name=condition');
        },
        getCapacityList: function () {
            return $http.get('/Lookup/GetLookups?name=capacity');
        },
        getManufacturerList: function () {
            return $http.get('/Lookup/GetLookups?name=manufacturer');
        },
        isBarcodeExists: function (barcode) {
            return $http.get('/ProductEntry/IsBarcodeExists?barcode=' + barcode);
        },
        getGeneratedBarcode: function () {
            return $http.get('/ProductEntry/GetGeneratedBarcode');
        },
        copyProduct: function (barcode) {
            return $http.get('/ProductEntry/CopyProduct?barcode=' + barcode);
        },
        getAttributes: function () {
            return $http({
                url: '/Attribute/GetAttributeNameList',
                method: 'GET',
                async: false
            });
        }
    };

}]);

// CONTROLLER
app.controller('postProductCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'postProductService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, postProductService) {

    $scope.IsFileValid = true;    
    $scope.discount = 0;
    $scope.quantity = 1;
    $scope.lowStockAlert = 5;    
    $scope.unit = "gm";
    var formData = new FormData();

    getAttributeList();
    getBranchList();
    getSupplierList();
    getItemTypeList();

    $scope.numberOnly = function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }

    $('#barcode').keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            checkBarcode();
        }
    });

    $scope.checkBarcodeDuplicacy = function () {
        checkBarcode();
    }

    $scope.showHideBarcodeScanner = function () {

        var isVisible = $('#barcode-reader-container').is(":visible");
        if (isVisible) {
            $('#barcode-reader-container').hide();
        }
        else {
            $('#barcode-reader-container').show();

            var html5QrcodeScanner = new Html5QrcodeScanner("barcode-reader", { fps: 10, qrbox: 250 });
            var lastResult, countResults = 0;

            html5QrcodeScanner.render(onScanSuccess, onScanError);

            $('a', '#barcode-reader').hide();

            function onScanSuccess(decodedText, decodedResult) {

                if (decodedText !== lastResult) {
                    lastResult = decodedText;

                    $('#barcode').val(decodedText);
                    document.getElementById("barcode-reader-container").style.display = "none";
                }
            }

            function onScanError(qrCodeError) {
            }
        }
    }

    function fillProduct(barcode) {

        // If barcode not exists then pick product from common DB
        $('#barcodeStatus').html('Getting product information...');
        postProductService.copyProduct(barcode)
            .success(function (data) {
                if (data) {

                    $('#barcodeStatus').html('');

                    // Product information
                    $scope.title = data.Title;
                    $scope.description = data.Description;
                    $scope.retailPrice = data.RetailPrice;
                    $scope.weight = data.Weight;
                    $scope.unit = data.Unit;
                    $scope.isFeatured = data.IsFeatured;
                    $scope.supplierId = data.SupplierId;

                    // Product images
                    if (data.ImageList) {
                        for (var i = 1; i <= data.ImageList.length; i++) {
                            $('#copyImgContainer' + i).show();
                            $('#copyImage' + i).attr('src', data.ImageList[i - 1].ImageName);
                        }
                    }
                }
                else {
                    $('#barcodeStatus').html('');
                }
            })
            .error(function (data) {
                $('#barcodeStatus').html('');
            });

    }

    function checkBarcode() {

        $('#barcodeStatus').html('Checking barcode...');

        // Check barcode is exists or not        
        postProductService.isBarcodeExists($scope.barcode)
            .success(function (data) {
                if (data.isExists) {
                    $('#barcode').css('border', '2px solid red');
                    $('#barcodeStatus').html('Barcode already exists!').css('color', 'red');                    
                }
                else {
                    $('#barcode').css('border', '2px solid green');
                    $('#barcodeStatus').html('').css('color', 'black');
                    
                    fillProduct($scope.barcode);
                }
            })
            .error(function(data){

            });        
    }

    $scope.generateBarcode = function () {
        postProductService.getGeneratedBarcode()
            .success(function (data) {
                if (data) {
                    $('#barcode').val(data.barcode);
                }                
            })
            .error(function (data) {

            });
    }

    $scope.generateVariations = function () { 

        var color = $scope.attributes[0];
        var size = $scope.attributes[1];

        var colorId = color.Id;
        var colorValues = color.Value.split(',');

        var sizeId = size.Id;
        var sizeValues = size.Value.split(',');

        window.attributeList = [];

        for (var i = 0; i < colorValues.length; i++) {

            for (var j = 0; j < sizeValues.length; j++) {

                var id = colorId + '-' + colorValues[i] + '_' + sizeId + '-' + sizeValues[j];
                var title = colorValues[i] + ' - ' + sizeValues[j];

                window.attributeList.push({ Id: id, Title: title, Price: 0, Discount: 0, Quantity: 0 });
            }
        }

        var html = '';
        for (var i = 0; i < window.attributeList.length; i++) {

            var obj = window.attributeList[i];
            html += '<tr>' +
                '<td>' + obj.Title + '</td>' +
                '<td>' + '<input id="txtPrice_' + obj.Id + '" type="text" class="form-control" />' + '</td>' +
                '<td>' + '<input id="txtQuantity_' + obj.Id + '" type="text" class="form-control" />' + '</td>' +
                '<td>' + '<a id="btnDelete_' + obj.Id + '" data="' + obj.Id + '" href="#" style="text-align: center;color: red;border: 0; font-size:20px !important;" class="form-control del-attribute">X<a/>' + '</td>' +
                '</tr>';

        }

        var header = '<tr class="header"><td>Title</td> <td>Price</td> <td>Quantity</td> <td>Remove</td> </tr>';
        html = '<table>' + header + html + '</table>';

        $('#tbl-variations').html(html);
    }

    $('body').on('click', '.del-attribute', function () {

        var id = $(this).attr('data');
        var delObj = window.attributeList.find(x => x.Id === id);

        // Delete from DOM
        $(this).closest('tr').remove();

        // Delete from array list
        window.attributeList.splice($.inArray(delObj, window.attributeList), 1);
    });
    
    function showHideLoading(show) {
        if (show) {
            $('.post-product-status').show();
            $('#btnPostProduct').attr('disabled', 'disabled');
        }
        else {
            $('.post-product-status').hide();
            $('#btnPostProduct').removeAttr('disabled');
        }
    }    

    $scope.postProduct = function () {

        $scope.submitted = true;
        if ($scope.myForm.$invalid) {
            return false;
        }

        formData = new FormData();

        // Validation
        if (!window.selectedCategoryId) {
            bootbox.alert("<h4>Please select a product category!</h4>", function () { });
            return;
        }
        else if (!$scope.branchId) {
            bootbox.alert("<h4>Please select a branch!</h4>", function () { });
            return;
        }
        else if ($scope.Barcode) {
            if ($scope.Barcode.length < 6) {
                bootbox.alert("<h4>Barcode must be greater than 6 characters!</h4>", function () { });
                return;
            }
        }
        else if (!$scope.title) {
            bootbox.alert("<h4>Please enter product title!</h4>", function () { });
            return;
        }
        else if (!$scope.description) {
            bootbox.alert("<h4>Please enter product description!</h4>", function () { });
            return;
        }
        else if (!$scope.supplierId) {
            bootbox.alert("<h4>Please select product supplier!</h4>", function () { });
            return;
        }
        else if (!$scope.costPrice) {
            bootbox.alert("<h4>Please enter product cost price!</h4>", function () { });
            return;
        }
        else if (!$scope.retailPrice) {
            bootbox.alert("<h4>Please enter product retail price!</h4>", function () { });
            return;
        }

        // Image1
        var image1 = $scope.productImage1;
        $scope.CheckFile(image1);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image1) {
                formData.append("image1", image1);
            }
        }

        // Image2
        var image2 = $scope.productImage2;
        $scope.CheckFile(image2);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image2) {
                formData.append("image2", image2);
            }
        }

        // Image3
        var image3 = $scope.productImage3;
        $scope.CheckFile(image3);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image3) {
                formData.append("image3", image3);
            }
        }

        // Image4
        var image4 = $scope.productImage4;
        $scope.CheckFile(image4);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image4) {
                formData.append("image4", image4);
            }
        }

        // Image5
        var image5 = $scope.productImage5;
        $scope.CheckFile(image5);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image5) {
                formData.append("image5", image5);
            }
        }

        // Image6
        var image6 = $scope.productImage6;
        $scope.CheckFile(image6);
        if (!$scope.IsFileValid) {
            return false;
        }
        else {
            if (image6) {
                formData.append("image6", image6);
            }
        }

        showHideLoading(true);

        var retailPrice = parseFloat($scope.retailPrice, 10);

        var product = {};

        product.Barcode = $('#barcode').val();
        product.BranchId = $scope.branchId;
        product.Title = $scope.title;
        product.Description = $scope.description;
        product.CategoryId = parseInt(window.selectedCategoryId, 10);
        product.CostPrice = parseFloat($scope.costPrice, 10);
        product.RetailPrice = retailPrice;
        product.Discount = !$scope.Discount ? 0 : parseFloat($scope.Discount, 10);

        product.Weight = !$scope.weight ? 0 : parseFloat($scope.weight, 10);
        product.Unit = $scope.unit;
        product.Quantity = !$scope.quantity ? 0 : parseInt($scope.quantity, 10);
        product.LowStockAlert = !$scope.lowStockAlert ? 0 : parseInt($scope.lowStockAlert, 10);
        product.IsFeatured = !$scope.isFeatured ? 0 : 1;
        product.ItemTypeId = $scope.itemTypeId;
        product.SupplierId = $scope.supplierId;

        // Attribute variations 
        if (window.attributeList) {
            for (var i = 0; i < window.attributeList.length; i++) {
                window.attributeList[i].Price = $('#txtPrice_' + window.attributeList[i].Id).val();
                window.attributeList[i].Quantity = $('#txtQuantity_' + window.attributeList[i].Id).val();
            }
            product.AttributeVariations = window.attributeList;
        }
        
        postProductService.postProduct(product, formData)
            .success(function (data) {
                showHideLoading(false);

                if (data.isSuccess) {                    
                    window.location.href = "/ProductEntry/PostProductMessage";
                }
                else {
                    if (data.message) {
                        bootbox.alert("<h4>"+ data.message +"</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Something wrong! Failed to post the product</h4>", function () { });
                    }
                }                
            })
            .error(function (exception) {
                showHideLoading(false);
                bootbox.alert("<h4>System Error Occured!</h4>", function () { });
            });
    }

    function getStringToDate(ddmmyyyy) {
        var from = ddmmyyyy.split("-");
        var dt = new Date(from[2], from[1] - 1, from[0]);
        return dt;
    }

    function getAttributeList() {
        postProductService.getAttributes()
            .success(function (data) {
                $scope.attributes = data;
            })
            .error(function (xhr) {
                bootbox.alert("<h4>Error! Failed to load attribute list!</h4>", function () { });
            });
    }

    function getBranchList() {
        postProductService.getBranchList()
        .success(function (data) {
            $scope.branchList = data;

            if ($scope.branchList && $scope.branchList.length == 1) {
                $scope.branchId = $scope.branchList[0].Id;
            }
        })
        .error(function (xhr) {
            ShowError('Error to get branches');
        });
    }

    function getSupplierList() {
        postProductService.getSupplierList()
        .success(function (data) {
            $scope.supplierList = data;
        })
        .error(function (xhr) {
            ShowError('Error to get suppliers');
        });
    }

    function getItemTypeList() {
        postProductService.getItemtypeList()
        .success(function (data) {
            $scope.itemTypeList = data;
        })
        .error(function (xhr) {
            ShowError('Error to get suppliers');
        });
    }

    $scope.selectPhoto1 = function (files) {
        $scope.productImage1 = files[0];
    };

    $scope.selectPhoto2 = function (files) {
        $scope.productImage2 = files[0];
    };

    $scope.selectPhoto3 = function (files) {
        $scope.productImage3 = files[0];
    };

    $scope.selectPhoto4 = function (files) {
        $scope.productImage4 = files[0];
    };

    $scope.selectPhoto5 = function (files) {
        $scope.productImage5 = files[0];
    };

    $scope.selectPhoto6 = function (files) {
        $scope.productImage6 = files[0];
    };
    
    $scope.CheckFile = function (file) {        
        if (file != null) {
            if ((file.type == 'image/gif' || file.type == 'image/png' || file.type == 'image/jpeg') && file.size <= (4096 * 1024)) { // limit photo size to 4 mb
                $scope.FileInvalidMessage = "";
                $scope.IsFileValid = true;
            }
            else {
                $scope.IsFileValid = false;
                bootbox.alert("<h4>Invalid file is selected. (File format must be gif or png or jpeg. Maximum file size 4 mb)</h4>", function () { });
            }
        }        
    };

    $("#isElectronicsItem").change(function () {
        if (this.checked) {
            $('.electronics-item-body').show();
        }
        else {
            $('.electronics-item-body').hide();
        }
    });

}]);
$(document).ready(function () {
            
});

// SERVICE
app.factory('editPostService', ['$http', function ($http) {

    return {        
        updateProduct: function (product) {

            formData = new FormData();
            formData.append('product', JSON.stringify(product));

            return $http.post('/ProductEntry/UpdateProduct', formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getProduct: function (id) {
            return $http({
                url: '/Product/GetProduct',
                method: 'GET',
                async: true,
                params: { id: id }
            });
        },

        getBranchList: function () {
            return $http.get('/Branch/GetUserBranchList');
        },

        getSupplierList: function () {
            return $http.get('/Supplier/GetSupplierList');
        },
        getItemtypeList: function () {
            return $http.get('/ItemType/GetItemTypeList');
        },
        getColorList: function () {
            return $http.get('/Lookup/GetLookups?name=color');
        },
        getConditionList: function () {
            return $http.get('/Lookup/GetLookups?name=condition');
        },
        getCapacityList: function () {
            return $http.get('/Lookup/GetLookups?name=capacity');
        },
        getManufacturerList: function () {
            return $http.get('/Lookup/GetLookups?name=manufacturer');
        }
    };

}
]);

// CONTROLLER
app.controller('editPostCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'editPostService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, editPostService) {
 
    var formData = new FormData();
    var productId = getParam('id');

    // Initialize date picker
    $('#expireDate').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });

    // Load branch & supplier list
    getBranchList();
    getSupplierList();
    getItemTypeList();

    getProduct(productId);

    function getProduct(id) {
        editPostService.getProduct(id)
            .success(function (product) {

                var retailPrice = parseFloat(product.RetailPrice, 10) + parseFloat(product.Discount, 10);

                $scope.barcode = product.Barcode
                $scope.branchId = product.BranchId;
                $scope.title = product.Title;
                $scope.description = product.Description;
                $scope.costPrice = product.CostPrice;
                $scope.retailPrice = retailPrice;
                $scope.Discount = product.Discount;
                $scope.weight = product.Weight;
                $scope.unit = product.Unit;
                $scope.quantity = product.Quantity;
                $scope.lowStockAlert = product.LowStockAlert;
                $scope.isFeatured = product.IsFeatured;
                $scope.itemTypeId = product.ItemTypeId;
                $scope.supplierId = product.SupplierId;
            
        })
        .error(function (xhr) {
            
        });
    }    

    $scope.numberOnly = function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }       

    $scope.sellTypeChange = function () {
        if (parseInt($scope.sellType, 10) === 1) {
            $scope.isAuction = false;
        }
        else {
            $scope.isAuction = true;
        }
    }

    $scope.updateProduct = function () {

        $scope.submitted = true;
        if ($scope.myForm.$invalid) {
            return false;
        }

        $scope.shortCode = $('#shortCode').val();

        // Validation
        if (!$scope.branchId) {
            bootbox.alert("<h4>Please select a branch!</h4>", function () { });
            return;
        }
        else if (!$scope.title) {
            bootbox.alert("<h4>Please enter product title!</h4>", function () { });
            return;
        }        
        else if (!$scope.description) {
            bootbox.alert("<h4>Please enter product description!</h4>", function () { });
            return;
        }
        else if (!$scope.supplierId) {
            bootbox.alert("<h4>Please select product supplier!</h4>", function () { });
            return;
        }        
        else if (!$scope.costPrice) {
            bootbox.alert("<h4>Please enter product cost price!</h4>", function () { });
            return;
        }
        else if (!$scope.retailPrice) {
            bootbox.alert("<h4>Please enter product retail price!</h4>", function () { });
            return;
        }

        var retailPrice = parseFloat($scope.retailPrice, 10);

        var product = {};
        product.Id = productId;        
        product.Barcode = $scope.barcode;
        product.BranchId = $scope.branchId;
        product.Title = $scope.title;
        product.Description = $scope.description;
        //product.CategoryId = parseInt(window.selectedCategoryId, 10);
        product.CostPrice = parseFloat($scope.costPrice, 10);
        product.RetailPrice = retailPrice;
        product.Discount = !$scope.Discount ? 0 : parseFloat($scope.Discount, 10);        
        product.Weight = !$scope.weight ? 0 : parseFloat($scope.weight, 10);
        product.Unit = $scope.unit;
        product.Quantity = !$scope.quantity ? 0 : parseInt($scope.quantity, 10);
        product.LowStockAlert = !$scope.lowStockAlert ? 0 : parseInt($scope.lowStockAlert, 10);
        product.IsFeatured = !$scope.isFeatured ? 0 : 1;
        product.ItemTypeId = $scope.itemTypeId;
        product.SupplierId = $scope.supplierId;        
        
        editPostService.updateProduct(product)
            .success(function (data) {
                if (data.isSuccess) {
                    window.location.href = "/ProductEntry/PostProductMessage";
                }
                else {
                    if (data.message) {
                        bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Something wrong! Failed to post the product</h4>", function () { });
                    }                    
                }
            })
            .error(function (exception) {
                bootbox.alert("<h4>Error Occured!!!</h4>", function () { });
            });
    }

    function getStringToDate(ddmmyyyy) {
        var from = ddmmyyyy.split("-");
        var dt = new Date(from[2], from[1] - 1, from[0]);
        return dt;
    }

    function getBranchList() {
        editPostService.getBranchList()
        .success(function (data) {
            $scope.branchList = data;
        })
        .error(function (xhr) {
            ShowError('Error to get branches');
        });
    }

    function getSupplierList() {
        editPostService.getSupplierList()
        .success(function (data) {
            $scope.supplierList = data;
        })
        .error(function (xhr) {
            ShowError('Error to get suppliers');
        });
    }

    function getItemTypeList() {
        editPostService.getItemtypeList()
        .success(function (data) {
            $scope.itemTypeList = data;
        })
        .error(function (xhr) {
            ShowError('Error to get suppliers');
        });
    }
    
    $scope.CheckFile = function (file) {        
        if (file != null) {
            if ((file.type == 'image/png' || file.type == 'image/jpeg') && file.size <= (4096 * 1024)) { // limit photo size to 4 mb
                $scope.FileInvalidMessage = "";
                $scope.IsFileValid = true;
            }
            else {
                $scope.IsFileValid = false;
                bootbox.alert("<h4>Invalid file is selected. (File format must be png or jpeg. Maximum file size 4 mb)</h4>", function () { });
            }
        }        
    };

}]);


// SERVICE
app.factory('updateStockService', ['$http', function ($http) {

    return {
        updateStock: function (productList) {

            return $http({
                url: '/ProductEntry/PostBulkProduct',
                method: 'POST',
                data: JSON.stringify(productList)
            })
            
        },
        
        getBranchList: function () {
            return $http.get('/Branch/GetUserBranchList');
        },

        getRootCategoryList: function () {
            return $http.get('/Category/GetParentCategoryList');
        }
    };

}]);

// CONTROLLER
app.controller('updateStockCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'updateStockService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, updateStockService) {

    getBranchList();
    //getRootCategoryList();
    
    $scope.numberOnly = function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }

    function showHideLoading(show) {
        if (show) {
            $('.post-product-status').show();
            $('#btnPostProduct').attr('disabled', 'disabled');
        }
        else {
            $('.post-product-status').hide();
            $('#btnPostProduct').removeAttr('disabled');
        }
    }

    $scope.changeBranch = function () {
        populateProducts();
    }

    function populateProductList(callback) {

        var branchId = $scope.branchId;
        var categoryId = $scope.categoryId;

        $('.item-loading').show();
        $.ajax({
            dataType: "json",
            url: '/Admin/GetStockList',
            data: { branchId: branchId, categoryId: categoryId },
            success: function (recordSet) {
                $('.item-loading').hide();                
                var dataSet = [];
                if (recordSet.length > 0) {
                    for (var i = 0; i < recordSet.length; i++) {
                        var record = [];
                        record.push(recordSet[i].Id);
                        record.push(recordSet[i].PrimaryImageName);
                        record.push(recordSet[i].Barcode);
                        record.push(recordSet[i].Title);
                        record.push(recordSet[i].Quantity);
                        record.push(recordSet[i].LowStockAlert);
                        record.push(recordSet[i].ExpireDate);
                        
                        dataSet.push(record);
                    }
                }

                callback(dataSet);
            },
            error: function (xhr) {
                $('.item-loading').hide();
            }
        });
    }

    
    function populateProducts() {

        populateProductList(function (records) {
            $('#dt-update-stock').dataTable({
                "data": records,
                "destroy": true,
                "bLengthChange": false,
                "bFilter": true,
                "pageLength": 100,
                "columns": [
                    { "title": "Id" },
                    { "title": "Image", "width": "70px" },
                    { "title": "Barcode" },
                    { "title": "Title" },
                    { "title": "Qty", "class": "center", "width": "150px" },
                    { "title": "Stock Alert", "class": "center" },
                    { "title": "Exp Date", "class": "center" },
                    { "title": "Action", "class": "center", "width": "100px" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [0, 5, 6],
                        "visible": false
                    },
                    {
                        "aTargets": [1],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Product/Details/?id=' + row[0] + '>' + '<img alt="" style="width:40px;" src="' + row[1] + '"/> </a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [3],
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Product/Details/?id=' + row[0] + '>' + row[3] + '</a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [4],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<input id="qty-'+ row[0] +'" type="number" class="form-control" style="width:100px; text-align:center;" value="'+ row[4] +'">';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [5],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<input id="lowStock-' + row[0] + '" type="number" class="form-control" style="width:100px; text-align:center;" value="' + row[5] + '">';
                            return $("<div/>").append(text).html();
                        }
                    },
                    
                    {
                        "aTargets": [7],
                        "searchable": false,
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var buttons = '<div><a title="Update Stock" id=' + row[0] + ' class="btn btn-primary update-stock cursor-pointer"><b>Update</b></a></div>';
                            return $("<div/>").append(buttons).html();
                        }
                    }
                ]
            });
        });

    }

    $('#dt-update-stock').on('click', '.update-stock', function () {
        var productId = $(this).attr('id');
        var quantity = $('#qty-' + productId).val();

        //var currentTr = $(this).closest("tr");

        updateStock(productId, quantity, function () {
            
        });
    });

    function updateStock(productId, quantity, callback) { 
        $.ajax({
            dataType: "json",
            url: '/Admin/UpdateStock',
            data: { productId: productId, quantity: quantity },
            success: function (data) {
                if (!data.IsSuccess) {
                    bootbox.alert("<h4>Sorry, Failed to update stock!</h4>", function () { });                    
                }
                callback();
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured while updating stock!</h4>", function () { });
            }
        });
    }



    function getBranchList() {
        updateStockService.getBranchList()
        .success(function (data) {
            $scope.branchList = data;
            if ($scope.branchList && $scope.branchList.length == 1) {                
            }
        })
        .error(function (xhr) {});
    }

    function getRootCategoryList() {
        updateStockService.getRootCategoryList()
        .success(function (data) {
            $scope.categoryList = data;
            if ($scope.categoryList && $scope.categoryList.length == 1) {
                $scope.categoryId = $scope.categoryListList[0].Id;
            }
        })
        .error(function (xhr) { });
    }
        
}]);


// SERVICE
app.factory('attrVariationService', ['$http', function ($http) {

    return {
        updateStock: function (productList) {

            return $http({
                url: '/ProductEntry/PostBulkProduct',
                method: 'POST',
                data: JSON.stringify(productList)
            })
            
        }
    };

}]);

// CONTROLLER
app.controller('AttrVariationCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'attrVariationService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, attrVariationService) {

    loadAttributes();

    function showHideLoading(show) {
        if (show) {
            $('.post-product-status').show();
            $('#btnPostProduct').attr('disabled', 'disabled');
        }
        else {
            $('.post-product-status').hide();
            $('#btnPostProduct').removeAttr('disabled');
        }
    }

    function populateAttributes(callback) {

        var productId = getParam('productId');

        $('.item-loading').show();
        $.ajax({
            dataType: "json",
            url: '/Admin/GetAttributeVariationList',
            data: { productId: productId },
            success: function (recordSet) {
                $('.item-loading').hide();                
                var dataSet = [];
                if (recordSet.length > 0) {
                    for (var i = 0; i < recordSet.length; i++) {
                        var record = [];
                        record.push(recordSet[i].Id);
                        record.push(recordSet[i].Title);
                        record.push(recordSet[i].Price);                        
                        record.push(recordSet[i].Quantity);
                        
                        dataSet.push(record);
                    }
                }

                callback(dataSet);
            },
            error: function (xhr) {
                $('.item-loading').hide();
            }
        });
    }

    
    function loadAttributes() {

        populateAttributes(function (records) {
            $('#dt-update-attr').dataTable({
                "data": records,
                "destroy": true,
                "bLengthChange": false,
                "bFilter": true,
                "pageLength": 100,
                "columns": [
                    { "title": "Id" },
                    { "title": "Title" },
                    { "title": "Price", "class": "center", "width": "150px" },
                    { "title": "Quantity", "class": "center", "width": "150px" },
                    { "title": "Action", "class": "center", "width": "100px" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [0],
                        "visible": false
                    },
                    {
                        "aTargets": [2],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<input id="price-'+ row[0] +'" type="number" class="form-control" style="width:100px; text-align:center;" value="'+ row[2] +'">';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [3],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<input id="qty-' + row[0] + '" type="number" class="form-control" style="width:100px; text-align:center;" value="' + row[3] + '">';
                            return $("<div/>").append(text).html();
                        }
                    },
                    
                    {
                        "aTargets": [4],
                        "searchable": false,
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var buttons = '<div><a title="Update Stock" id=' + row[0] + ' class="btn btn-primary update-attr-stock cursor-pointer"><b>Update</b></a></div>';
                            return $("<div/>").append(buttons).html();
                        }
                    }
                ]
            });
        });

    }

    $('#dt-update-attr').on('click', '.update-attr-stock', function () {
        var id = $(this).attr('id');
        var quantity = $('#qty-' + id).val();
        var price = $('#price-' + id).val();

        updateStock(id, price, quantity, function () {
            bootbox.alert("<h4>Data updated successfully!</h4>", function () { });         
        });
    });

    function updateStock(id, price, quantity, callback) { 
        $.ajax({
            dataType: "json",
            url: '/Admin/UpdateAttributeVariation',
            data: { id: id, price: price, quantity: quantity },
            success: function (data) {
                if (!data.IsSuccess) {
                    bootbox.alert("<h4>Sorry, Failed to update stock!</h4>", function () { });                    
                }
                callback();
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error occured while updating stock!</h4>", function () { });
            }
        });
    }
        
}]);
$(document).ready(function () {

    loadCategoryTree();

    var categoryList = [];

    function loadCategoryTree() {
        $.ajax({
            dataType: "json",
            contentType: 'application/json',
            url: '/Category/GetCategoryTree',
            method: 'GET',
            async: true,
            data: {},
            success: function (recordSet) {
                categoryList = recordSet;
                load_category();
            },
            error: function (xhr) {
            }
        })
    };
        
    $('#oneSelectEditCategory').on('change', function () {
        clearList(1, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('twoSelectEditCategory', window.subCatList);
        }
        else {
            setSelectedText(1, true);            
            window.selectedEditCategoryId = this.value;
        }
    });

    $('#twoSelectEditCategory').on('change', function () {
        clearList(2, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('threeSelectEditCategory', window.subCatList);
        }
        else {
            setSelectedText(2, true);            
            window.selectedEditCategoryId = this.value;
        }
    });

    $('#threeSelectEditCategory').on('change', function () {
        clearList(3, true);
        getChildList(parseInt(this.value, 10), true);
        if (window.subCatList && window.subCatList.length > 0) {
            populateListControls('fourSelectEditCategory', window.subCatList);
        }
        else {
            setSelectedText(3, true);            
            window.selectedEditCategoryId = this.value;
        }
    });

    $('#fourSelectEditCategory').on('change', function () {
        setSelectedText(4, true);        
        window.selectedEditCategoryId = this.value;
    });    

    $('#btnCategoryContinue').on('click', function () {
        $('.selectedCategoryText').html(window.selectedCategoryText);
        
        $('.cat-edit-section').show();
        $('.cat-continue-section').hide();
        $('.category-picker').hide();
    });

    $('#btnEditCategory').on('click', function () {

        $('.cat-edit-section').hide();
        $('.cat-continue-section').show();
        $('.category-picker').show();        
    });    

    function clearList(number, isCategory) {

        if (isCategory) {
            disableButton('btnCategoryContinue');
            if (number === 1) {
                $('#twoSelectEditCategory').empty();
                $('#threeSelectEditCategory').empty();
                $('#fourSelectEditCategory').empty();
            }
            else if (number === 2) {
                $('#threeSelectEditCategory').empty();
                $('#fourSelectEditCategory').empty();
            }
            else if (number === 3) {
                $('#fourSelectEditCategory').empty();
            }
        }
    }

    function populateListControls(id, items) {
        var list = $("#" + id);
        list.empty();
        list.show();        
        $.each(items, function (index, item) {
            list.append(new Option(item.Name, item.Id));
        });
    }    

    function getRootCategory() {
        var rootCatList = [];
        if (categoryList && categoryList.length > 0) {
            for (var i = 0; i < categoryList.length; i++) {
                rootCatList.push({ id: categoryList[i].Id, name: categoryList[i].Name });
            }
        }
        return rootCatList;
    }

    function getChildList(id, isCategory) {

        if (isCategory) {
            var childCatList = [];
            for (var i = 0; i < categoryList.length; i++) {
                if (categoryList[i].Id === id) {
                    window.subCatList = categoryList[i].ChildCategories;
                    return categoryList[i].ChildCategories;
                } else {
                    childCatList = getChilds(categoryList[i], id, isCategory);
                }
            }
            return childCatList;
        }
        else {
            var childLocList = [];
            for (var i = 0; i < locationList.length; i++) {
                if (locationList[i].Id === id) {
                    window.subLocList = locationList[i].ChildLocations;
                    return locationList[i].ChildLocations;
                } else {
                    childLocList = getChilds(locationList[i], id, isCategory);
                }
            }
            return childLocList;
        }
    }

    function getChilds(obj, id, isCategory) {
        
        if (isCategory) {
            if (obj.Id === id) {
                window.subCatList = obj.ChildCategories;
                return obj.ChildCategories;
            }
            else {
                if (obj.ChildCategories) {
                    for (var i = 0; i < obj.ChildCategories.length; i++) {
                        getChilds(obj.ChildCategories[i], id, isCategory);
                    }
                }
            }
        }
        else {
            if (obj.Id === id) {
                window.subLocList = obj.ChildLocations;
                return obj.ChildLocations;
            }
            else {
                if (obj.ChildLocations) {
                    for (var i = 0; i < obj.ChildLocations.length; i++) {
                        getChilds(obj.ChildLocations[i], id, isCategory);
                    }
                }
            }
        }
    }

    function setSelectedText(controlId, isCategory) {

        if (isCategory) {
            window.selectedCategoryText = '';
            if (controlId === 1) {
                window.selectedCategoryText = $("#oneSelectEditCategory option:selected").text();
            }
            else if (controlId === 2) {
                window.selectedCategoryText = $("#oneSelectEditCategory option:selected").text() + ' / ' + $("#twoSelectEditCategory option:selected").text();
            }
            else if (controlId === 3) {
                window.selectedCategoryText = $("#oneSelectEditCategory option:selected").text() + ' / ' + $("#twoSelectEditCategory option:selected").text() + ' / ' + $("#threeSelectEditCategory option:selected").text();
            }
            else if (controlId === 4) {
                window.selectedCategoryText = $("#oneSelectEditCategory option:selected").text() + ' / ' + $("#twoSelectEditCategory option:selected").text() + ' / ' + $("#threeSelectEditCategory option:selected").text() + ' / ' + $("#fourSelectEditCategory option:selected").text();
            }
            activateButton('btnCategoryContinue');
        }        
    }
    function activateButton(id) {
        $('#' + id).prop("disabled", false);
        $('#' + id).addClass('btn-active');
        $('#' + id).removeClass('btn-disable');
    }
    function disableButton(id) {
        $('#' + id).prop("disabled", true);
        $('#' + id).removeClass('btn-active');
        $('#' + id).addClass('btn-disable');
    }

    function load_category() {
        // Load root categories
        var catItems = getRootCategory();
        var catBox = $("#oneSelectEditCategory");
        $.each(catItems, function (index, item) {
            catBox.append(new Option(item.name, item.id));
        });        
    }

    window.subCatList = [];
    window.selectedCategoryText = '';
    window.selectedEditCategoryId = ''; 
    
   
});

// SERVICE
app.factory('editCategoryService', ['$http', function ($http) {

    return {
        editCategory: function (productId, categoryId) {

            return $http.post('/ProductEntry/UpdateCategory?productId=' + productId + '&categoryId=' + categoryId, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        }
    };

}
]);

// CONTROLLER
app.controller('editCategoryCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'editCategoryService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, editCategoryService) {

    var productId = getParam('id');

    getCategoryName(productId);

    function getCategoryName(productId) {
        $.ajax({
            dataType: "json",
            contentType: 'application/json',
            url: '/Category/GetCategoryName?productId=' + productId,
            method: 'GET',
            async: true,
            data: {},
            success: function (data) {
                $('#catName').html(data);
            },
            error: function (xhr) {
            }
        })
    };

    $scope.updateCategory = function () {

        if (!window.selectedEditCategoryId) {
            bootbox.alert("<h4>Please select a product category!</h4>", function () { });
            return;
        }
        
        var productId = getParam('id');
        var categoryId = parseInt(window.selectedEditCategoryId, 10);
       
        editCategoryService.editCategory(productId, categoryId)
            .success(function (data) {
                
                if (data.isSuccess) {                    
                    window.location.href = "/ProductEntry/PostProductMessage";
                }
                else {
                    if (data.message) {
                        bootbox.alert("<h4>"+ data.message +"</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Something wrong! Failed to update category</h4>", function () { });
                    }
                }                
            })
            .error(function (exception) {
                bootbox.alert("<h4>Error Occured!!!</h4>", function () { });
            });
    
    }
    
}]);
$(document).ready(function () {

    $(".top-cat-menu-header").click(function () {
        if ($(".top-cat-menu-container").is(":visible") == true) {
            $('.top-cat-menu-container', this).fadeOut("fast");
        }
        else {
            $('.top-cat-menu-container', this).fadeIn("fast");
        }
    });

    $(".top-cat-menu-container").mouseleave(function () {
        if ($(".top-cat-menu-container").is(":visible") == true) {
            $('.top-cat-menu-container').fadeOut("fast");
        }
    });

});

// SERVICE CALL
app.factory('homePageService', [
    '$http', function ($http) {

        return {

            getHomepageCategoryItems: function () {
                return $http({
                    url: '/Home/GetHomepageCategoryItems',
                    method: 'GET',
                    async: true
                });
            },

            getCategoryWithImage: function () {
                return $http({
                    url: '/Home/GetCategoryWithImage',
                    method: 'GET',
                    async: true
                });
            },

            getHomePage_FeaturedItems: function () {
                return $http({
                    url: '/Home/GetHomePage_FeaturedItems',
                    method: 'GET',
                    async: true
                });
            },

            getHomePage_PopularItems: function () {
                return $http({
                    url: '/Home/GetHomePage_PopularItems',
                    method: 'GET',
                    async: true
                });
            },

            getHomePage_NewArrivals: function () {
                return $http({
                    url: '/Home/GetHomePage_NewArrivals',
                    method: 'GET',
                    async: true
                });
            },

            getCategoryList: function () {
                return $http({
                    url: '/Category/GetParentCategoryList',
                    method: 'GET',
                    async: true
                });
            },

            getSliderImageList: function () {
                return $http({
                    url: '/HomeSlider/GetSliderImageList',
                    method: 'GET',
                    async: true
                });
            }
        };
    }
]);

// CONTROLLER
app.controller('HomeCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'homePageService', function ($rootScope, $scope, $http, $filter, $location, Enum, homePageService) {

    loadSliderImageList();

    renderLeftCategories();

    renderCategoryImages();

    renderHomepageCategoryItems();      

    renderNewArrivals();

    renderPopularItems();

    renderFeaturedItems();
    
    function renderHomepageCategoryItems() {

        homePageService.getHomepageCategoryItems()
            .success(function (itemList) {
                for (var i = 0; i < itemList.length; i++) {
                    var item = itemList[i];
                    LoadCategoryItemList(i, item.Title, item.ImageName, item.ProductList);
                }
            })
            .error(function (xhr) {

            });
    }

    function LoadCategoryItemList(counter, categoryName, categoryImageName, productList) {

        var containerId = 'homepage-item-container-' + counter;

        var html = '    <div class="container area-back"> '+
                                '<div class="category-info">'+
                                    '<a>' +
                                        '<img src="/photos/categories/' + categoryImageName + '" />' +
                                    '</a>'+
                                 '</div> '+

                                 '<div class="homepage-section-container-slick clearfix product-info"> '+
                                    '<div class="cat-title" style = "height:20px;"> '+
                                        '<span> ' + categoryName +'</span> '+
                                    '</div> '+
                                    '<div id = "' + containerId +'" class="slider grid_popularItems"> '+

                                    '</div> '+
                                '</div> '+
                        '</div> ';

        $('#category-wise-container').append('<br/>' + html + '<br/>');

        $('#' + containerId).html('');
        for (var i = 0; i < productList.length; i++) {

            var addToCartAttr = 'productId="' + productList[i].Id + '" name="' + productList[i].Title + '" price="' + productList[i].RetailPrice + '" imageUrl="' + productList[i].PrimaryImageName + '"';

            var plus_attr = 'id="btnPlus_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
            var minus_attr = 'id="btnMinus_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
            var qty_attr = 'id="txtQty_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';

            $('#' + containerId).append(
                '<div class="grid-item"> ' +
                '<div class="div-item-container clearfix">' +
                '<a class="item-link-container clearfix" href="/Product/Details?id=' + productList[i].Id + '"> ' +
                '<div class="grid-item-image img-hr-info"> ' +
                '<img src="' + productList[i].PrimaryImageName + '" /> ' +
                '</div> ' +
                '<div class="grid-item-info product-hr-info"> ' +
                '<span class="h-p-title center">' + productList[i].Title + '</span> ' +
                '<div class="center"> ' +
                '<span class="old-price">' + productList[i].PriceTextOld + '</span>' + '<span class="h-p-price">' + productList[i].PriceText + '</span>' +
                '</div> ' +
                '<div class="center"> ' +

                '<div class="btn-qty-container">' +
                '<button ' + minus_attr + ' class="btn-minus btn btn-default">-</button>' +
                '<input ' + qty_attr + ' type="text" value="1" class="txtQty form-control" style="    background-color: #ebebeb !important;"> ' +
                '<button ' + plus_attr + ' class="btn-plus btn btn-default">+</button>' +
                '</div>' +

                '<div class="item-basket">' +
                '<img ' + addToCartAttr + ' class="h-cart home-add-to-cart" title="Add to cart" src="/images/basket.png" style="float:right;" />' +
                '</div>' +

                '</div> ' +
                '</div> ' +
                '</a> ' +
                '</div>' +
                '</div> ');
        }

        $('#' + containerId).slick({
            rows: 2,
            slidesToShow: 2,
            slidesToScroll: 1,
            arrows: true,
            fade: false,
            speed: 300,
            responsive: [
                {
                    breakpoint: 1024,
                    settings: {
                        rows: 1,
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        rows: 1,
                        slidesToShow: 2,
                        slidesToScroll: 1
                    }
                },
                {
                    breakpoint: 300,
                    settings: "unslick"
                }
            ]
        });
    }
    
    function loadSliderImageList() {
        homePageService.getSliderImageList()
            .success(function (data) {

                $('.hom-slider-loader').remove();

                for (var i = 0; i < data.length; i++) {
                    var image = data[i];
                    var imageSrc = '/Images/slider/' + image.ImageName + '?v=' + image.Id;
                    var html = '<a href="' + image.Url + '"><img src="'+ imageSrc +'" style="height:350px;" /></a>';
                    $('.home-slider').append(html);
                }

                $('.home-slider').slick({
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false,
                    autoplay: true,
                    autoplaySpeed: 2000,
                    infinite: true,
                    focusOnSelect: true
                });

            })
            .error(function (xhr) {
            });
    };

    function renderLeftCategories() {

        homePageService.getCategoryList()
            .success(function (cats) {

                var html = '<ul>';
                for (var i = 0; i < cats.length; i++) {
                    html += '<li>' +
                                '<a style="display: block; position: relative;" href="/Product/Search?cat=' + cats[i].Id + '&catName=' + cats[i].Name + ' ">' + cats[i].Name + '</a>' + '<img src="/Images/right-arrow.png" style="height: 15px; margin-left: 5px; float:right; position:relative;top:-16px;">' +
                            '</li>';
                }

                html += '</ul>';
                $('#side-category').html(html);

                var htmlCatMenu = '<div class="row">';
                for (var i = 0; i < cats.length; i++) {

                    if (i === 0) {
                        htmlCatMenu += '<div class="col-md-4">';
                    }
                    else if (i === 10) {
                        htmlCatMenu += '<div class="col-md-4">';
                    }
                    else if (i === 20) {
                        htmlCatMenu += '<div class="col-md-4">';
                    }

                    htmlCatMenu += '<div style="padding:2px;"><a href="/Product/Search?cat=' + cats[i].Id + '">' + cats[i].Name + '</a></div>';

                    if (i === 9) {
                        htmlCatMenu += '</div>';
                    }
                    else if (i === 19) {
                        htmlCatMenu += '</div>';
                    }
                    else if (i === 29) {
                        htmlCatMenu += '</div>';
                    }
                }

                htmlCatMenu += '</div>';

                $('.top-cat-menu-container').html(htmlCatMenu);
            })
            .error(function (xhr) {

            });

        // Slim scroll
        $(".slim-scroll").slimScroll({
            size: '8px',
            width: '100%',
            height: '100%',
            color: '#ff4800',
            allowPageScroll: true,
            alwaysVisible: false
        });
    }

    function renderCategoryImages() {

        homePageService.getCategoryWithImage()
            .success(function (catList) {

                $('#homepage-category-image').html('');
                for (var i = 0; i < catList.length; i++) {

                    $('#homepage-category-image').append(
                        '<div class="grid-item"> ' +
                        '<div class="div-item-container">' +
                        '<a class="item-link-container" href="/Product/Search?cat=' + catList[i].CategoryId + '"> ' +
                        '<div class="grid-item-image"> ' +
                        '<img src="/photos/categories/' + catList[i].ImageName + '" /> ' +
                        '</div> ' +
                        '<div class="grid-item-info"> ' +
                        '<span class="h-p-title center">' + catList[i].Title + '</span> ' +
                        '</div> ' +
                        '</a> ' +
                        '</div>' +
                        '</div>');
                }

                $('#homepage-category-image').slick({
                    slidesToShow: 6,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false,
                    fade: false,
                    speed: 300,
                    responsive: [
                        {
                            breakpoint: 1024,
                            settings: {
                                slidesToShow: 4,
                                slidesToScroll: 1
                            }
                        },
                        {
                            breakpoint: 600,
                            settings: {
                                slidesToShow: 2,
                                slidesToScroll: 1
                            }
                        },
                        {
                            breakpoint: 300,
                            settings: "unslick"
                        }
                    ]
                });
            })
            .error(function (xhr) {

            });
    }

    function renderPopularItems() {

        homePageService.getHomePage_PopularItems()
            .success(function (productList) {

                $('#homepage-container-popular').html('');
                for (var i = 0; i < productList.length; i++) {

                    var addToCartAttr = 'productId="' + productList[i].Id + '" name="' + productList[i].Title + '" price="' + productList[i].RetailPrice + '" imageUrl="' + productList[i].PrimaryImageName + '"';

                    var plus_attr = 'id="btnPlus_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var minus_attr = 'id="btnMinus_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var qty_attr = 'id="txtQty_pi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';

                    $('#homepage-container-popular').append(
                        '<div class="grid-item"> ' +
                            '<div class="div-item-container clearfix">'+
                                '<a class="item-link-container clearfix" href="/Product/Details?id=' + productList[i].Id + '"> ' +
                                    '<div class="grid-item-image"> ' +
                                        '<img src="' + productList[i].PrimaryImageName + '" /> ' +
                                    '</div> ' +
                                    '<div class="grid-item-info"> ' +
                                        '<span class="h-p-title">' + productList[i].Title + '</span> ' +
                                        '<div> ' +
                                            '<span class="old-price">' + productList[i].PriceTextOld + '</span>' + '<span class="h-p-price">' + productList[i].PriceText + '</span>' +                                        
                                        '</div> ' +                                        
                                    '</div> ' +
                                '</a> ' +
                            '</div>' +
                        '</div> ');
                }

                $('#homepage-container-popular').slick({
                    slidesToShow: 5,
                    slidesToScroll: 1,
                    arrows: true,                    
                    fade: false,
                    speed: 300,
                    responsive: [
                        {
                            breakpoint: 1024,
                            settings: {                                
                                slidesToShow: 4,
                                slidesToScroll: 1
                            }
                        },
                        {
                            breakpoint: 600,
                            settings: {                                
                                slidesToShow: 2,
                                slidesToScroll: 1
                            }
                        },                        
                        {
                            breakpoint: 300,
                            settings: "unslick"
                        }
                    ]
                });
            })
            .error(function (xhr) {

            });
    }

    function renderNewArrivals() {

        homePageService.getHomePage_NewArrivals()
            .success(function (productList) {

                $('#homepage-container-newarrival').html('');
                for (var i = 0; i < productList.length; i++) {

                    var addToCartAttr = 'productId="' + productList[i].Id + '" name="' + productList[i].Title + '" price="' + productList[i].RetailPrice + '" imageUrl="' + productList[i].PrimaryImageName + '"';

                    var plus_attr = 'id="btnPlus_ms_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var minus_attr = 'id="btnMinus_ms_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var qty_attr = 'id="txtQty_ms_' + productList[i].Id + '" productId="' + productList[i].Id + '"';

                    $('#homepage-container-newarrival').append(
                        '<div class="grid-item"> ' +
                        '<div class="div-item-container">' +
                        '<a class="item-link-container" href="/Product/Details?id=' + productList[i].Id + '"> ' +
                        '<div class="grid-item-image"> ' +
                        '<img src="' + productList[i].PrimaryImageName + '" /> ' +
                        '</div> ' +
                        '<div class="grid-item-info"> ' +
                        '<span class="h-p-title">' + productList[i].Title + '</span> ' +
                        '<div> ' +
                        '<span class="old-price">' + productList[i].PriceTextOld + '</span>' + '<span class="h-p-price">' + productList[i].PriceText + '</span>' +
                        '</div> ' +                        
                        '</div> ' +
                        '</a> ' +
                        '</div>' +
                        '</div> ');
                }

                $('#homepage-container-newarrival').slick({
                    slidesToShow: 5,
                    slidesToScroll: 1,
                    arrows: true,                    
                    fade: false,
                    speed: 300,
                    responsive: [
                        {
                            breakpoint: 1024,
                            settings: {
                                slidesToShow: 4,
                                slidesToScroll: 1
                            }
                        },
                        {
                            breakpoint: 600,
                            settings: {
                                slidesToShow: 2,
                                slidesToScroll: 1
                            }
                        },
                        {
                            breakpoint: 300,
                            settings: "unslick"
                        }
                    ]
                });
            })
            .error(function (xhr) {

            });
    }       

    function renderFeaturedItems() {

        homePageService.getHomePage_FeaturedItems()
            .success(function (productList) {

                $('.grid-item', '#homepage-container-featured').remove();
                for (var i = 0; i < productList.length; i++) {


                    var addToCartAttr = 'productId="' + productList[i].Id + '" name="' + productList[i].Title + '" price="' + productList[i].RetailPrice + '" imageUrl="' + productList[i].PrimaryImageName + '"';

                    var plus_attr = 'id="btnPlus_fi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var minus_attr = 'id="btnMinus_fi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';
                    var qty_attr = 'id="txtQty_fi_' + productList[i].Id + '" productId="' + productList[i].Id + '"';

                    $('#homepage-container-featured').append(
                        '<div class="grid-item"> ' +
                        '<div class="div-item-container">' +
                        '<a class="item-link-container" href="/Product/Details?id=' + productList[i].Id + '"> ' +
                        '<div class="grid-item-image"> ' +
                        '<img src="' + productList[i].PrimaryImageName + '" /> ' +
                        '</div> ' +
                        '<div class="grid-item-info"> ' +
                        '<span class="h-p-title ">' + productList[i].Title + '</span> ' +
                        '<div class=""> ' +
                        '<span class="old-price">' + productList[i].PriceTextOld + '</span>' + '<span class="h-p-price">' + productList[i].PriceText + '</span>' +
                        '</div> ' +                        
                        '</div> ' +
                        '</a> ' +
                        '</div>' +
                        '</div> ');

                }
            })
            .error(function (xhr) {

            });
    }

    $('#homepage-container-popular').on('click', '.home-add-to-cart', function (event) {
        var productId = $(this).attr('productId');
        var name = $(this).attr('name');
        var price = $(this).attr('price');
        var imageUrl = $(this).attr('imageUrl');
        var qty = $('#txtQty_pi_' + productId).val();

        addToCart('', productId, name, qty, price, imageUrl);
        event.preventDefault();

        animateAddToCart(this);
    });

    $('#homepage-container-newarrival').on('click', '.home-add-to-cart', function (event) {
        var productId = $(this).attr('productId');
        var name = $(this).attr('name');
        var price = $(this).attr('price');
        var imageUrl = $(this).attr('imageUrl');
        var qty = $('#txtQty_ms_' + productId).val();

        addToCart('', productId, name, qty, price, imageUrl);
        event.preventDefault();

        animateAddToCart(this);
    });

    $('#homepage-container-featured').on('click', '.home-add-to-cart', function (event) {
        var productId = $(this).attr('productId');
        var name = $(this).attr('name');
        var price = $(this).attr('price');
        var imageUrl = $(this).attr('imageUrl');
        var qty = $('#txtQty_fi_' + productId).val();

        addToCart('', productId, name, qty, price, imageUrl);
        event.preventDefault();

        animateAddToCart(this);
    });

    $('#homepage-container-popular').on('click', '.btn-plus', function (event) { 
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_pi_' + productId).val();
        var newQty = parseInt(qty, 10) + 1;

        $('#txtQty_pi_' + productId).val(newQty);
        event.preventDefault();
    });

    $('#homepage-container-newarrival').on('click', '.btn-plus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_ms_' + productId).val();
        var newQty = parseInt(qty, 10) + 1;

        $('#txtQty_ms_' + productId).val(newQty);
        event.preventDefault();
    });

    $('#homepage-container-featured').on('click', '.btn-plus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_fi_' + productId).val();
        var newQty = parseInt(qty, 10) + 1;

        $('#txtQty_fi_' + productId).val(newQty);
        event.preventDefault();
    });

    $('#homepage-container-popular').on('click', '.btn-minus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_pi_' + productId).val();
        
        var newQty = parseInt(qty, 10) - 1;

        if (newQty >= 1) {
            $('#txtQty_pi_' + productId).val(newQty);
        }

        event.preventDefault();
    });

    $('#homepage-container-newarrival').on('click', '.btn-minus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_ms_' + productId).val();

        var newQty = parseInt(qty, 10) - 1;

        if (newQty >= 1) {
            $('#txtQty_ms_' + productId).val(newQty);
        }

        event.preventDefault();
    });

    $('#homepage-container-featured').on('click', '.btn-minus', function (event) {
        var productId = $(this).attr('productId');
        var qty = $('#txtQty_fi_' + productId).val();

        var newQty = parseInt(qty, 10) - 1;

        if (newQty >= 1) {
            $('#txtQty_fi_' + productId).val(newQty);
        }

        event.preventDefault();
    });

    $('#homepage-container-popular,#homepage-container-newarrival,#homepage-container-featured').on('click', '.txtQty', function (event) {        
        event.preventDefault();
    });

}]);

// SERVICE CALL
app.factory('productDetailsService', [
    '$http', function ($http) {

        return {
            getProduct: function (id) {
                return $http({
                    url: '/Product/GetProduct',
                    method: 'GET',
                    async: true,
                    params: { id: id }
                });
            },
            
            getRelatedProductList: function (categoryId, excludeProductId) {
                return $http({
                    url: '/Product/GetRelatedProducts',
                    method: 'GET',
                    async: true,
                    params: { categoryId: categoryId, excludeProductId: excludeProductId }
                });
            }            
        };

    }
]);

// CONTROLLER
app.controller('ProductDetailCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', '$compile', 'Enum', '$sce', 'productDetailsService', function ($rootScope, $scope, $http, $filter, $location, $compile, Enum, $sce, productDetailsService) {


    var productId = getParam('id');
    if (productId) {
        getProduct(productId);        
    }
    
    function getRelatedProductList(categoryId, productId) {
        productDetailsService.getRelatedProductList(categoryId, productId)
        .success(function (rpList) {

            for (var i = 0; i < rpList.length; i++) {
                $('.related-product-slider').append('<a href="/Product/Details?id='+ rpList[i].Id +'"><div data-index="' + i + 1 + '" class="rp-item"> ' +
                    
                                                        '<div class="rp-img"> ' +
                                                            '<img src="' + rpList[i].PrimaryImageName + '" alt="One">' +
                                                        '</div>' +
                                                            '<span class="rp-old-price">' + rpList[i].PriceTextOld + '</span>' + '<span class="rp-price theme-text-color">' + rpList[i].PriceText + '</span>' +
                                                        '<div class="rp-info">' +
                                                            '<div class="rp-info-title">' + rpList[i].Title + '</div>' +                                                            
                                                        '</div>' +                                                        
                                                     '</div></a>');
                
            }

            $('.related-product-slider').slick({
                slidesToShow: 6,
                slidesToScroll: 1,
                arrows: true,
                prevArrow:"<img class='a-left control-c prev slick-prev' src='/images/left-arrow.png'>",
                nextArrow:"<img class='a-right control-c next slick-next' src='/images/right-arrow.png'>",
                fade: false,
                speed: 300,
                responsive: [
                            {
                                breakpoint: 1024,
                                settings: {
                                    slidesToShow: 4,
                                    slidesToScroll: 1
                                }
                            },
                            {
                                breakpoint: 600,
                                settings: {
                                    slidesToShow: 2,
                                    slidesToScroll: 1
                                }
                            },
                            {
                                breakpoint: 300,
                                settings: "unslick"
                            }
                ]
            });
        });
    }

    $scope.closeModal = function(){
        $('.slider-modal').hide();
        $('.slider-modal-close').hide();
        $('.max-view-icon').hide();
    }
    
    $('body').on('click', '.attrColor', function () {
        $('.attrColor').removeClass('color-select');
        $(this).addClass('color-select');

        var data = $(this).attr('data');
        window.selectedColor = data;

        setPrice();
    });

    $('body').on('click', '.attrSize', function () {
        $('.attrSize').removeClass('size-select');
        $(this).addClass('size-select');

        var data = $(this).attr('data');
        window.selectedSize = data;

        setPrice();
    });

    function setPrice() {

        var colorValue = '';
        var selectedColor = $('.color-select');
        if (selectedColor) {
            colorValue = selectedColor.attr('data');
        }

        var sizeValue = '';
        var selectedSize = $('.size-select');
        if (selectedSize) {
            sizeValue = selectedSize.attr('data');
        }

        var value1 = colorValue + ' - ' + sizeValue;
        var value2 = sizeValue + ' - ' + colorValue;
        var price = '';

        $scope.attributeVariations = $scope.product.AttributeVariations;

        if ($scope.attributeVariations) {
            for (var i = 0; i < $scope.attributeVariations.length; i++) {

                if ($scope.attributeVariations[i].Title.toLowerCase() === value1.toLowerCase() || $scope.attributeVariations[i].Title.toLowerCase() === value2.toLowerCase()) {
                    price = $scope.attributeVariations[i].Price;
                    window.price = price;

                    if ($scope.product.Discount) {
                        window.price = price - $scope.product.Discount;
                        window.oldPrice = price;
                    }

                    window.attributeVariationId = $scope.attributeVariations[i].Id;
                    break;
                }
            }
        }

        $('.item-price').html(siteCurrency() + window.price);        
        $('.old-price').html(window.oldPrice ? siteCurrency() + window.oldPrice : ''); 
    }

    function getAvailable_Colors_Sizes(attrVariations) {

        var colors = [];
        var sizes = [];

        for (var i = 0; i < attrVariations.length; i++) {

            var item = attrVariations[i].Title.split(' - ');
            if (item.length === 2) {

                // Color
                var colorFound = jQuery.inArray(item[0].toLowerCase(), colors);
                if (colorFound === -1) {
                    colors.push(item[0].toLowerCase());
                }

                // Size
                var sizeFound = jQuery.inArray(item[1], sizes);
                if (sizeFound === -1) {
                    sizes.push(item[1]);
                }
            }
        }

        var attrList = [];
        attrList.push(colors);
        attrList.push(sizes);

        return attrList;
    }

    function getProduct(id) {
        productDetailsService.getProduct(id)
        .success(function (data) {
            $('#product-description').html(data.Description ? data.Description.replace(/\n/g, '<br>') : "");
            $scope.product = data;

            // Product attributes: color & size
            var attrList = getAvailable_Colors_Sizes(data.AttributeVariations);
            var colors = attrList[0];
            var sizes = attrList[1];

            // Colors
            if (colors && colors.length > 0) {
                for (var i = 0; i < colors.length; i++) {
                    var colorHtml = '<a id="color-' + colors[i] + '" class="attrColor ' + colors[i] + '" data="' + colors[i] + '" ></a>';
                    $('#divColor').append(colorHtml);
                }
            }
            else {
                $('.color-view').hide();
            }

            // Sizes
            if (sizes && sizes.length > 0) {
                for (var i = 0; i < sizes.length; i++) {
                    var sizeHtml = '<a id="size-' + sizes[i] + '" class="attrSize" data="' + sizes[i] + '" >' + sizes[i] + '</a>';
                    $('#divSize').append(sizeHtml);
                }
            }
            else {
                $('.size-view').hide();
            }
            
            if (data.DefaultColor && data.DefaultSize) {
                window.selectedColor = data.DefaultColor;
                window.selectedSize = data.DefaultSize;

                $('#color-' + data.DefaultColor.toLowerCase()).addClass('color-select');
                $('#size-' + data.DefaultSize).addClass('size-select');

                setPrice();
            }
                                    
            // For shopping cart
            window.productId = data.Id;
            window.imageUrl = data.ImageList.length > 0 ? data.ImageList[0].ThumbImageName : '';
            window.price = data.RetailPrice;
            window.name = data.Title;            

            var imageList = data.ImageList;

            // Bread crumb
            var breadCrumb = '<a class="bc-item" style="position:relative; left: -3px;" href=/Home><i class="icon-home-1"></i>Home</a> <i class="icon-right-open-big"></i>';
            for (var i = 0; i < data.BreadCrumbList.length; i++) {
                var bc = data.BreadCrumbList[i];
                if (bc.Id) {
                    breadCrumb = breadCrumb + '<a class="bc-item" href=/Product/Search?cat=' + bc.Id + '>' + bc.Name + '</a> <i class="icon-right-open-big"></i>';
                }
                else {                    
                    breadCrumb = breadCrumb + '<span>' + bc.Name + '</span>';
                }
            }
            $('#bread-crumb').append(breadCrumb);

            var windowHeight = $(window).height();

            // Slick slider
            $('.slider').html('');
            for (var i = 0; i < imageList.length; i++) {
                $('.slider').append('<div class="slider-container" data-index="' + i + 1 + '"><span class="max-view-icon icon-search-4"></span><div style="display:table; height: 488px;"><div style="display:table-cell;vertical-align: middle;"><img class="slider-img" src="' + imageList[i].ImageName + '" alt="' + i + 1 + '"></div></div></div>');
                $('.slider-nav-thumbnails').append('<div data-index="' + i + 1 + '"><img src="' + imageList[i].ThumbImageName + '" alt="' + i + 1 + '"></div>');
                $('.slider-modal').append('<div data-index="' + i + 1 + '"><div style="display:table; height: ' + windowHeight + 'px;"><div style="display:table-cell;vertical-align: middle;"><img class="modal-details-slide-img" src="' + imageList[i].MaxViewImageName + '" alt="' + i + 1 + '"></div></div></div>');
            }

            $('.slider').slick({
                slidesToShow: 1,
                slidesToScroll: 1,
                arrows: true,
                fade: false,
                speed: 1,                
                prevArrow: "<a class='a-left control-c prev slick-prev'></a>",
                nextArrow: "<a class='a-right control-c next slick-next'></a>",
                asNavFor: '.slider-nav-thumbnails',
            });

            $('.slider-nav-thumbnails').slick({
                slidesToShow: 6,
                slidesToScroll: 0,
                asNavFor: '.slider',
                dots: false,
                arrows: false,
                focusOnSelect: true
            });

            $('.slider-modal').slick({
                slidesToShow: 1,
                slidesToScroll: 1,
                arrows: true,
                fade: false,
                speed: 1,
                prevArrow: "<a class='a-left control-c prev slick-prev'></a>",
                nextArrow: "<a class='a-right control-c next slick-next'></a>"
            });

            // If there are only one image then hide the thumb view
            if (imageList.length === 1) {
                $('.slider-nav-thumbnails').hide();
            }

            // If no logo available then hide it
            if (data.Seller.Store && !data.Seller.Store.LogoName) {
                $('#store-logo').css('border', '0');                
                $('.company-title').css('padding-left', '0');                
            }            

            // Load related products
            getRelatedProductList(data.Category.Id, data.Id);

        })
        .error(function (xhr) {            
        });
    }

    function animateAddToCart_DetailPage(obj) {
        var cart = $('.top-shopping-cart');
        var img = $('.slider-img').eq(0);

        var imgtodrag = img;
        if (imgtodrag) {
            var imgclone = imgtodrag.clone()
                .offset({
                    top: imgtodrag.offset().top,
                    left: imgtodrag.offset().left
                })
                .css({
                    'opacity': '0.5',
                    'position': 'absolute',
                    'height': '150px',
                    'width': '150px',
                    'z-index': '100'
                })
                .appendTo($('body'))
                .animate({
                    'top': cart.offset().top + 10,
                    'left': cart.offset().left + 10,
                    'width': 75,
                    'height': 75
                }, 1000, 'easeInOutExpo');

            setTimeout(function () {
                cart.effect("shake", {
                    times: 2
                }, 200);
            }, 1500);

            imgclone.animate({
                'width': 0,
                'height': 0
            }, function () {
                
            });
        }
    }

    $(document).ready(function () {

        // For shopping cart
        window.productId = '';
        window.imageUrl = '';
        window.price = '';
        window.name = '';        

        $('.btn-add-to-cart').click(function () {

            if ($scope.product.AttributeVariations && $scope.product.AttributeVariations.length > 0) {
                if (!window.selectedColor || !window.selectedSize) {
                    bootbox.alert("<h4>Please select Color & Size!</h4>", function () { });
                    return;
                }
            }

            var qty = $('#cartQuantity').val();
            var title = window.name + (window.selectedColor ? ' [Color: ' + window.selectedColor + ']' : '') + (window.selectedSize ? ' [Size: ' + window.selectedSize + ']' : '');

            addToCart(window.attributeVariationId, window.productId, title, qty, window.price, window.imageUrl); 

            animateAddToCart_DetailPage(this);
        });


        $('#btnPlus').click(function () {
            var qty = $('#cartQuantity').val();
            $('#cartQuantity').val(parseInt(qty, 10) + 1);
        });

        $('#btnMinus').click(function () {
            var qty = $('#cartQuantity').val();
            if (parseInt(qty, 10) > 1) {
                $('#cartQuantity').val(parseInt(qty, 10) - 1);
            }
        });


        $(document).on("mouseenter", ".slider-img", function () {
            $('.max-view-icon').css('display', 'inline-table');
        });

        $(document).on("mouseleave", ".slider-img", function () {
            $('.max-view-icon').hide();
        });

        $(document).on("mouseenter", ".max-view-icon", function () {
            $('.max-view-icon').css('display', 'inline-table');
        });
                
        $(".max-view-icon").live("click", function () {
            var dataIndex = $(this).parent().closest('.slick-slide').attr('data-slick-index');
            $('.slider-modal').slick('slickGoTo', dataIndex)
            $('.slider-modal').show();
            $('.slider-modal-close').show();

            $(".slider-modal").slick("refresh");
        });

        
        $(document).ready(function ($) {
            $('.tab_content').hide();
            $('.tab_content:first').show();
            $('.tabs li:first').addClass('active');
            $('.tabs li').click(function (event) {
                $('.tabs li').removeClass('active');
                $(this).addClass('active');
                $('.tab_content').hide();

                var selectTab = $(this).find('a').attr("href");

                $(selectTab).fadeIn();
            });
        });        
    });

}]);
$(document).ready(function () {

    builtShoppingCartItems();

    confirmOrderList();

    getUserInformation();

    showStep();

    function showStep() {
        var param = getParam('step');
        if (param === 'confirm-order') {
            $('#div-confirm-order').show();
            $('#div-place-order').hide();
        }
    }

    $('.tbl-shopping-cart-items').on('click', '.delete-shopping-cart-item', function () {
        var id = $(this).attr('id');
        
        removeCartItem(id)

        var currentTr = $(this).closest("tr");
        $(currentTr).remove();

        builtShoppingCartItems();        
    });

    $('#btnClearCart').click(function () {

        bootbox.confirm("<h3 class='text-danger'>Clear Cart Items</h3> " +
                        "<br/><h4 class='text-info'> Are you sure to clear the cart?</h4>",
                        function (result) {
                            if (result) {
                                clearCart();
                                builtShoppingCartItems();
                            }
                        });

    });

    $('#btnUpdateCart').click(function () {
        
        var cart = getCart();
        for (var i = 0; i < cart.length; i++) {
            var quantityInputBoxId = 'txtQty_' + cart[i].Id;
            cart[i].Quantity = $('#' + quantityInputBoxId).val();
        }
        
        updateCart(cart);
        builtShoppingCartItems();
    });

    function showLoader() {
        $('#order-loader').show();
        $('#btnBack').show();
        $("#btnConfirmOrder").prop("disabled", true);
        $("#btnBack").prop("disabled", true);
    }

    function hideLoader() {
        $('#order-loader').hide();
        $('#btnBack').hide();
        $("#btnConfirmOrder").prop("disabled", false);
        $("#btnBack").prop("disabled", false);
    }

    function isCodPayment() {

        // COD or Card payment
        var isCod = false;
        if ($("#rbCod").is(":checked")) {
            isCod = true;
        }

        return isCod;
    }

    // Here order records are save
    $('#btnConfirmOrder').click(function () {
        var userStatus = getUserStatus();
        if (!userStatus.isLoggedIn) {
            window.location.href = '/Security/Login/?returnUrl=/cart';
            return;
        }

        // COD or Card
        var isCOD = isCodPayment();
        
        var order = {};
        order.OrderItems = [];        
        
        var cart = getCart();
        var totalAmount = 0;
        var val = 0;
        var shippingAmount = getShippingCharge();
        var grandTotal = 0;

        for (var i = 0; i < cart.length; i++) {

            var orderItem = {};

            var price = parseFloat(cart[i].RetailPrice, 10);
            var quantity = parseInt(cart[i].Quantity, 10);

            orderItem.Title = cart[i].Name;
            orderItem.ProductId = cart[i].Id;
            orderItem.AttributeVariationId = cart[i].AttributeVariationId;
            orderItem.Quantity = quantity;
            orderItem.Discount = 0;
            orderItem.Price = price;
            orderItem.TotalPrice = quantity * price;
            orderItem.ImageUrl = cart[i].ImageUrl;

            order.OrderItems.push(orderItem);

            totalAmount += (price * quantity);
        }

        vat = Math.round((totalAmount * getVatPercentage()) / 100);
        grandTotal = totalAmount + vat + shippingAmount;

        order.OrderMode = 'Online';

        order.OrderStatus = 'Processing';
        order.PaymentStatus = 'Pending';
        order.PaymentType = isCOD === true ? 'COD' : 'Card';

        order.PayAmount = grandTotal;        
        order.Vat = vat;
        order.ShippingAmount = shippingAmount;


        showLoader();

        // Saving Records
        $.ajax({
            dataType: "json",
            contentType: 'application/json',
            url: '/Customer/PlaceOrder',
            data: JSON.stringify(order),
            method: 'POST',
            success: function (data) {
                if (data.isSuccess) {

                    clearCart();

                    if (isCOD) {                        
                        window.location.href = '/Customer/OrderConfirm?orderCode=' + data.orderCode;
                    }
                    else {
                        proceedToCardPayment(data.orderId, data.orderCode, grandTotal);
                    }
                }
                else {
                    hideLoader();
                    bootbox.alert("<h4>Failed to place your order!</h4>", function () { });
                }

                $('#updateStatus').html('');
            },
            error: function (xhr) {
                hideLoader();
                $('#updateStatus').html('');
                bootbox.alert("<h4>Error occured while placing your order!</h4>", function () { });
            }
        });

    });

    function proceedToCardPayment(orderId, orderCode, amount) {

        $.ajax({
            dataType: "json",
            url: '/Customer/CardPayment',
            type: 'POST',
            data: { orderId: orderId, orderCode: orderCode, amount: amount },
            success: function (data) {
                if (data.isSuccess) {

                    var stripeKey = getStripePublishKey();
                    var stripe = Stripe(stripeKey);

                    stripe.redirectToCheckout({
                        sessionId: data.sessionId
                    }).then(function (result) {
                        bootbox.alert("<h4>" + result.error.message + "</h4>", function () { });
                    });

                }
                else {
                    hideLoader();
                    bootbox.alert("<h4>Failed to initiate your order!</h4>", function () { });
                }
            },
            error: function (xhr) {
                hideLoader();
                bootbox.alert("<h4>Error occured while initiating your order!</h4>", function () { });
            }
        });
    }

    $('#btnPlaceOrder').click(function () {

        var userStatus = getUserStatus();
        if (!userStatus.isLoggedIn) {
            window.location.href = '/Security/Login/?returnUrl=/cart';
            return;
        }

        var isCOD = isCodPayment();
        if (isCOD) {
            $('#btnConfirmOrder').html('Confirm Order');
        }
        else {
            $('#btnConfirmOrder').html('Confirm Order & Proceed to Pay');
        }

        $('#div-confirm-order').show();
        $('#div-place-order').hide();

    });

    $('#btnBack,#btnEditAddr').click(function () {
        $('#div-place-order').show();
        $('#div-confirm-order').hide();
    });    

    $('#btnUpdateAddress').click(function () { 

        $('#updateStatus').html('Updating your address...');

        var mobile = $('#mobile').val();
        var firstName = $('#firstName').val();
        var lastName = $('#lastName').val();        
        var address = $('#address').val();
        var zipCode = $('#zip').val();
        var city = $('#city').val();
        var state = $('#state').val();
        var country = $('#country').val();

        if (!zipCode) {
            bootbox.alert("<h4>Please enter zipcode!</h4>", function () { });
            return;
        }
        else if (!state) {
            bootbox.alert("<h4>Please enter prefecture!</h4>", function () { });
            return;
        }
        else if (!city) {
            bootbox.alert("<h4>Please enter city!</h4>", function () { });
            return;
        }
        else if (!firstName) {
            bootbox.alert("<h4>Please enter your name!</h4>", function () { });
            return;
        }

        $.ajax({
            dataType: "json",
            url: '/Account/UpdateUserAddress',
            data: { mobile: mobile, firstName: firstName, lastName: lastName, address: address, zipCode: zipCode, city: city, state: state, country: country },
            method: 'POST',            
            success: function (data) {
                if (data.isSuccess) {

                    // Show in confirm order section
                    $('#showFirstName').html(firstName);
                    $('#showMobile').html(mobile);
                    $('#showAddress').html(address);
                    $('#showZipCode').html(zipCode);
                    $('#showCity').html(city);
                    $('#showState').html(state);
                    
                    bootbox.alert("<h4>Your address has been updated sucessfully!</h4>", function () { });
                }
                else {
                    if (data.message) {
                        bootbox.alert("<h4>"+ data.message +"</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Failed to update!</h4>", function () { });
                    }
                }

                $('#updateStatus').html('');
            },
            error: function (xhr) {
                $('#updateStatus').html('');
                bootbox.alert("<h4>Error occured while updating your address!</h4>", function () { });
            }
        });
    });
    
});

// Get user information
function getUserInformation() {

    var isLoggedIn = false;
    var userStatus = getUserStatus();
    if (userStatus.isLoggedIn) {
        isLoggedIn = true;
    }

    if (isLoggedIn) {
        $.ajax({
            dataType: "json",
            url: '/Account/GetLoggedInUserAddress',
            success: function (data) {
                if (data) {
                    $('#firstName').val(data.FirstName);
                    $('#mobile').val(data.Username);
                    $('#address').val(data.ShipAddress);
                    $('#zip').val(data.ShipZipCode);
                    $('#city').val(data.ShipCity);
                    $('#state').val(data.ShipState);
                    
                    // Show in confirm order section
                    $('#showFirstName').html(data.FirstName);
                    $('#showMobile').html(data.Username);
                    $('#showAddress').html(data.ShipAddress);
                    $('#showZipCode').html(data.ShipZipCode);
                    $('#showCity').html(data.ShipCity);
                    $('#showState').html(data.ShipState);                    
                }
            },
            error: function (xhr) {
            }
        });
    }
    else {
        $('.customer-address').hide();
    }
}

function builtShoppingCartItems() {
    
    var subTotal = 0;
    var vatAmount = 0;
    var shippingAmount = getShippingCharge();
    var grandTotal = 0;

    var cart = getCart();

    var html = '<table class="tbl-shopping-cart-items">';

    html += '<tr class="shopping-cart-header">';
    html += '<td>Image</td>';
    html += '<td>Name</td>';
    html += '<td class="center">Price</td>';
    html += '<td class="center">Qty</td>';
    html += '<td class="center">Total</td>';
    html += '<td class="center">Remove</td>';
    html += '</tr>';
    
    for (var i = 0; i < cart.length; i++) {

        var itemTotal = (parseFloat(cart[i].RetailPrice, 10) * parseInt(cart[i].Quantity, 10));
        var quantityInputBoxId = 'txtQty_' + cart[i].Id;

        html += '<tr>';

        html += '<td>';
        html += '<img src="' + cart[i].ImageUrl + '" />';
        html += '</td>';

        html += '<td>';
        html += '<a href="/Product/Details?id=' + cart[i].Id + '">' + cart[i].Name + '</a>';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + siteCurrency() + cart[i].RetailPrice + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<input type="number" class="font-control" style="width:50px; text-align:center;" value="' + cart[i].Quantity + '" id="'+ quantityInputBoxId +'" />';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + siteCurrency() + itemTotal + '</span>';
        html += '</td>';

        html += '<td class="center">';
        html += '<img id="' + cart[i].Id + '" class="delete-shopping-cart-item img-cart" src="/Images/cross.png" style="cursor:pointer;">';
        html += '</td>';

        html += '</tr>';        
    }

    html += '</table>';

    // Getting summary calculated amount
    var obj = getSummaryAmount();
    subTotal = obj.subTotal;
    vatAmount = obj.vatAmount;
    shippingAmount = obj.shippingAmount;
    grandTotal = obj.grandTotal;
    
    $('#checkout-subTotal').html(siteCurrency() + subTotal);
    $('#vatPerc').html('(' + getVatPercentage() + '%)');
    $('#checkout-vatAmount').html(siteCurrency() + vatAmount);
    $('#checkout-shippingAmount').html(siteCurrency() + shippingAmount);
    $('#checkout-grandTotal').html(siteCurrency() + (grandTotal));
    
    $('.shopping-cart-container').html(html);
}

function confirmOrderList() {

    var subTotal = 0;
    var vatAmount = 0;
    var shippingAmount = getShippingCharge();
    var grandTotal = 0;
    var totalQuantity = 0

    var cart = getCart(); 

    var html = '<table class="tbl-shopping-cart-items">';

    html += '<tr class="shopping-cart-header">';
    html += '<td>SL</td>';
    html += '<td>Image</td>';
    html += '<td class="left">Name</td>';
    html += '<td class="center">Price</td>';
    html += '<td class="center">Qty</td>';
    html += '<td class="right">Total</td>';    
    html += '</tr>';

    for (var i = 0; i < cart.length; i++) {

        var itemTotal = (parseFloat(cart[i].RetailPrice, 10) * parseInt(cart[i].Quantity, 10));

        html += '<tr>';

        html += '<td>';
        html += '<span>'+ (i + 1) +'</span>';
        html += '</td>';

        html += '<td>';
        html += '<img src="' + cart[i].ImageUrl + '" class="img-cart" />';
        html += '</td>';

        html += '<td class="left">';
        html += '<a href="/Product/Details?id=' + cart[i].Id + '">' + cart[i].Name + '</a>';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + siteCurrency() + cart[i].RetailPrice + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<span>' + cart[i].Quantity + '</span>';
        html += '</td>';

        html += '<td class="right">';
        html += '<span>' + siteCurrency() + itemTotal + '</span>';
        html += '</td>';

        html += '</tr>';
    }

    // Getting summary calculated amount
    var obj = getSummaryAmount();
    subTotal = obj.subTotal;
    vatAmount = obj.vatAmount;
    shippingAmount = obj.shippingAmount;
    grandTotal = obj.grandTotal;
    totalQuantity = obj.totalQuantity;

    // Summary row
    html += '<tr class="summary-row right">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Sub Total ('+ totalQuantity +' items):</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + subTotal + '</span>';
    html += '</td>';

    html += '</tr>';
    
    // Vat amount row    
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Vat (' + getVatPercentage() + '%):</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + vatAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Shipping amount row
    html += '<tr class="summary-row shipping-cost">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Shipping Cost:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + shippingAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Grand total row
    html += '<tr class="summary-row grand-total">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Grand Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + grandTotal + '</span>';
    html += '</td>';

    html += '</tr>';

    // Shipping charge note
    html += '<tr class="summary-row shipping-cost-note">';
    html += '<td colspan="6">';
    html += '<span class="" style="float:right; font-weight:400;">Note: Shipping charge will be added based on location and weight</span>';
    html += '</td>';
    html += '</tr>';

    html += '</table>';

    $('#order-item-list').html(html);
}
function populateMemberOrderList(callback) {

    $('.item-loading').show();    
    $.ajax({
        dataType: "json",
        url: '/Customer/GetOrderList',
        data: {},
        success: function (recordSet) {
            $('.item-loading').hide();
            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].OrderCode);
                    record.push(siteCurrency() + recordSet[i].PayAmount);
                    record.push(recordSet[i].OrderMode);
                    record.push(recordSet[i].OrderStatus);
                    record.push(recordSet[i].PaymentStatus);
                    record.push(recordSet[i].PaymentType);
                    record.push(recordSet[i].ActionDateString);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

app.factory('customerOrderListService', [
    '$http', function ($http) {

        return {
            
        };
    }
]);

app.controller('CustomerOrderListCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'customerOrderListService', function ($rootScope, $scope, $http, $filter, $location, Enum, customerOrderListService) {

    populateMemberOrderList(function (records) {
        $('#customerOrderList-datatable').dataTable({
            "data": records,
            "bLengthChange": false,
            "bFilter": true,
            "pageLength": 50,
            "bDestroy": true,            
            "columns": [
                { "title": "Order Id" },
                { "title": "Order Code" },
                { "title": "Grand Total" },
                { "title": "Order Mode", "class": "center" },
                { "title": "Order Status" },
                { "title": "Payment Status", "class": "center" },
                { "title": "Payment Type", "class": "center" },
                { "title": "Order Date" }
            ],
            "aoColumnDefs": [
                {
                    "aTargets": [0],
                    "visible": false
                },
                {
                    "aTargets": [1],
                    "mRender": function (data, type, row) {
                        var text = '<a href=/Customer/OrderDetails?orderId=' + row[0] + '>' + row[1] + '</a>';
                        return $("<div/>").append(text).html();
                    }
                }
            ]
        });
    });

}]);

function populateOrderDetails(callback) {

    var orderId = getParam('orderId');

    $('.item-loading').show();    
    $.ajax({
        dataType: "json",
        url: '/Customer/GetOrderDetails',
        data: {orderId: orderId},
        success: function (order) {
            $('.item-loading').hide();
            renderOrderItems(order);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function printOrder() {

    var orderId = getParam('orderId');
    window.location.href = "/Order/PrintOrder?orderId=" + orderId;
}

function renderOrderItems(order) {

    var subTotal = 0;
    var vatAmount = 0;
    var shippingAmount = 0;
    var grandTotal = 0;
    var totalQuantity = 0

    if (order) {
        $('#orderId').html(order.Id);
        $('#orderStatus').html(order.OrderStatus);
        $('#orderDate').html(moment(order.ActionDate, "x").format('DD MMM YYYY h:mm:ss a'));        
    }

    var html = '<table class="tbl-shopping-cart-items">';

    html += '<tr class="shopping-cart-header">';
    html += '<td>SL</td>';
    html += '<td>Image</td>';
    html += '<td class="left">Name</td>';
    html += '<td class="center">Price</td>';
    html += '<td class="center">Qty</td>';
    html += '<td class="right">Total</td>';
    html += '</tr>';

    for (var i = 0; i < order.OrderItems.length; i++) {

        var item = order.OrderItems[i];

        var itemTotal = (parseFloat(item.Price, 10) * parseInt(item.Quantity, 10));

        html += '<tr>';

        html += '<td>';
        html += '<span>' + (i + 1) + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<img src="' + item.ImageUrl + '" class="img-cart" />';
        html += '</td>';

        html += '<td class="left">';
        html += '<span>' + item.ProductName + '</span>';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + siteCurrency() + item.Price + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<span>' + item.Quantity + '</span>';
        html += '</td>';

        html += '<td class="right">';
        html += '<span>' + siteCurrency() + itemTotal + '</span>';
        html += '</td>';

        html += '</tr>';
    }

    // Getting summary calculated amount
    subTotal = order.PayAmount - order.Vat - order.ShippingAmount;
    vatAmount = order.Vat;
    shippingAmount = order.ShippingAmount ? order.ShippingAmount : 0;
    grandTotal = order.PayAmount;
    totalQuantity = order.OrderItems.length;

    // Summary row
    html += '<tr class="summary-row right">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Sub Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + subTotal + '</span>';
    html += '</td>';

    html += '</tr>';

    // Vat amount row    
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Vat (' + getVatPercentage() + '%):</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + vatAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Shipping amount row
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Shipping Charge:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + shippingAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Grand total row
    html += '<tr class="summary-row grand-total">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Grand Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + grandTotal + '</span>';
    html += '</td>';

    html += '</tr>';

    html += '</table>';

    $('#order-details-item-list').html(html);
}

app.factory('service', [
    '$http', function ($http) {

        return {
            
        };
    }
]);

app.controller('CustomerOrderDetailsCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'service', function ($rootScope, $scope, $http, $filter, $location, Enum, service) {

    var orderId = getParam('orderId');

    if (orderId) {
        getOrder(orderId);
    }

    function getOrder(orderId) {
        populateOrderDetails(orderId);        
    }

    $('#printOrder').click(function () {
        printOrder();
    });

}]);

function populateOrderList(branchId, fromDate, toDate, orderMode, orderStatus, callback) {

    $('.item-loading').show();
    $.ajax({
        dataType: "json",
        url: '/Order/GetOrderList',
        data: { branchId: branchId, fromDate: fromDate, toDate: toDate, orderStatus: orderStatus, orderMode: orderMode },
        success: function (recordSet) {
            $('.item-loading').hide();
            $('#delete-btn-container').show();

            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].OrderCode);
                    record.push(siteCurrency() + recordSet[i].PayAmount);                    
                    record.push(recordSet[i].OrderStatus);
                    record.push(recordSet[i].PaymentStatus);
                    record.push(recordSet[i].PaymentType);
                    record.push(recordSet[i].ActionDateString);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

$(document).ready(function () {
   
});

app.factory('orderListService', [
    '$http', function ($http) {

        return {
            getBranchList: function () {
                return $http.get('/Branch/GetUserBranchList');
            }
        };
    }
]);

app.controller('AdminOrderListCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'orderListService', function ($rootScope, $scope, $http, $filter, $location, Enum, orderListService) {

    getBranchList();

    $('#dateFrom').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });
    $('#dateTo').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });

    var orderMode = getParam('orderMode');
    if (orderMode) {
        $('.order-mode').removeClass('order-mode-active');
        $('#' + orderMode).addClass('order-mode-active');
    }
    else {
        $('.order-mode').removeClass('order-mode-active');
        $('#All').addClass('order-mode-active');
    }

    function populateOrders(branchId, fromDate, toDate, orderMode, orderStatus) {
        populateOrderList(branchId, fromDate, toDate, orderMode, orderStatus, function (records) {
            $('#data-table-admin-orderlist').dataTable({
                "data": records,
                "bLengthChange": false,
                "bFilter": true,
                "pageLength": 50,
                "bDestroy": true,
                "order": [[1, "desc"]],
                "columns": [
                    { "title": "Delete", "class": "center" },
                    { "title": "Order Code", "class": "center" },
                    { "title": "Grand Total", "class": "right" },                    
                    { "title": "Order Status", "class": "center" },
                    { "title": "Payment Status", "class": "center" },
                    { "title": "Payment Type", "class": "center" },
                    { "title": "Order Date" },
                    { "title": "Action", "class": "center" },
                    { "title": "Edit", "class": "center" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [5],
                        "visible": false
                    },
                    {
                        "aTargets": [0],
                        "visible": true,
                        "bSortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<input class="check-box" type="checkbox" id="' + row[0] + '" value="' + row[0] + '">';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [1],
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Order/OrderDetails?orderId=' + row[0] + '>' + row[1] + '</a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [7],
                        "bSortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<a id=' + row[0] + ' class="btn btn-success btn-order-complete">Complete</a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [8],
                        "bSortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<a id=' + row[0] + ' href="/Order/SalesReturn?orderId=' + row[0] + '" class="btn btn-warning btn-sales-return">Edit</a>';
                            return $("<div/>").append(text).html();
                        }
                    }
                ]
            });

            // Hide the action button column in completed list
            if (orderStatus === 'Completed') {
                var table = $('#data-table-admin-orderlist').DataTable();
                var column = table.column(7);
                column.visible(false);
            }


        });
    }    

    function getBranchList() {
        orderListService.getBranchList()
            .success(function (data) {
                for (var i = 0; i < data.length; i++) {
                    $('#branch').append($("<option />").val(data[i].Id).text(data[i].Name));
                }
            })
            .error(function (xhr) { });
    }

    $("#branch").change(function () {
        var val = this.value;
        if (val != "") { //All Branches
            var orderMode = $('#orderMode').val();
            if (orderMode === "Online") {
                $('#orderMode').val('');
            }
        }
    });

    $("#orderMode").change(function () {
        var val = this.value;
        if (val === "Online") {
            $('#branch').val('');
        }
    });

    $('#showOrders').click(function () {        
        showOrderRecords();
    });

    function showOrderRecords() {
        var fromDate = $('#dateFrom').val();
        var toDate = $('#dateTo').val();
        var orderMode = $('#orderMode').val();
        var orderStatus = $('#orderStatus').val();
        var branchId = $('#branch').val();

        if (!orderStatus) {
            bootbox.alert("<h4>Please select an order status!</h4>", function () { });
            return;
        }

        populateOrders(branchId, fromDate, toDate, orderMode, orderStatus);
    }


    $('#btn-delete').click(function () {

        var checkIds = '';
        var count = 0;

        $('.check-box:checkbox:checked').each(function () {
            var id = (this.checked ? $(this).val() : "");

            if (id) {
                checkIds += id + ',';
                count++;
            }
        });

        if (count === 0) {
            bootbox.alert("<h4>Please select an order to delete!</h4>", function () { });
            return;
        }
        else if (count > 100) {
            bootbox.alert("<h4>Please delete maximum 100 orders at a time!</h4>", function () { });
            return;
        }

        bootbox.confirm("<h4>Are you sure to delete selected orders?</h4>",
           function (result) {
               if (result) {
                   DeleteOrder(checkIds, function () {                       
                   });
               }
           });

    });

    $('#data-table-admin-orderlist').on('click', '.btn-order-complete', function () {

        var orderId = $(this).attr('id');
        var currentTr = $(this).closest("tr");
        
        bootbox.confirm("<h4>Are you sure to completed this order?</h4>",
           function (result) {
               if (result) {
                   CompleteOrder(orderId, function () {
                       $(currentTr).hide();
                   });
               }
           });
    });

    function CompleteOrder(orderId, callback) {
        $.ajax({
            dataType: "json",
            url: '/Order/CompleteOrder',
            data: { orderId: orderId },
            success: function (data) {
                if (data.isSuccess) {
                    callback();
                }
                else {
                    bootbox.alert("<h4>Failed to complete this order!</h4>", function () { });
                }
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error to complete this order!</h4>", function () { });
            }
        });
    }

    function DeleteOrder(ids, callback) {
        $.ajax({
            dataType: "json",
            url: '/Order/DeleteOrder',
            data: { orderIds: ids },
            success: function (data) {

                if (data.message) {
                    bootbox.alert("<h4>" + data.message + "</h4>", function () { });                    
                }
                else {
                    if (data.deletedOrderCodes) {
                        showOrderRecords();
                    }
                    else {
                        bootbox.alert("<h4>Orders are not deleted!</h4>", function () { });
                    }
                }                
            },
            error: function (xhr) {
                bootbox.alert("<h4>Error to deleting orders!</h4>", function () { });
            }
        });
    }

}]);

function populateOrderDetails(callback) {

    var orderId = getParam('orderId');

    $('.item-loading').show();    
    $.ajax({
        dataType: "json",
        url: '/Customer/GetOrderDetails',
        data: {orderId: orderId},
        success: function (order) {
            $('.item-loading').hide();
            renderOrderItems(order);
            
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function populateCustomerAddress(userId) {

    $.ajax({
        dataType: "json",
        url: '/Admin/GetCustomer',
        data: { id: userId },
        success: function (customer) {
            if (customer) {
                $('#txtPhone').val(customer.Username);
                $('#txtFirstName').val(customer.FirstName);
                $('#txtLastName').val(customer.LastName);
                $('#txtCity').val(customer.ShipCity);
                $('#ddlPrefecture').val(customer.ShipState);
                $('#txtPostCode').val(customer.ShipZipCode);
                $('#txtAddress').val(customer.ShipAddress);
            }
        },
        error: function (xhr) {
            
        }
    });
}

function printOrder() {

    var orderId = getParam('orderId');
    window.location.href = "/Order/PrintOrder?orderId=" + orderId;
}

function printInvoice() {

    var orderId = getParam('orderId');
    window.location.href = "/Order/PrintInvoice?orderId=" + orderId;
}

function renderOrderItems(order) {

    var subTotal = 0;
    var discount = 0;
    var vatAmount = 0;
    var shippingAmount = 0;
    var grandTotal = 0;
    var totalQuantity = 0

    if (order) {

        var weight = order.TotalWeight ? order.TotalWeight + ' Kg' : '';
        var deliveryDateTime = (order.DeliveryDate && order.DeliveryTime) ? order.DeliveryDate + ' ' + (order.DeliveryTime === 'Not Specified' ? '' : order.DeliveryTime) : '';

        $('#orderCode').html(order.OrderCode);
        $('#orderMode').html(order.OrderMode);
        $('#orderStatus').html(order.OrderStatus);
        $('#totalWeight').html(weight);
        $('#deliveryDate').html(deliveryDateTime);
        $('#frozenItem').html(order.IsFrozen ? 'Yes' : 'No');
        $('#orderDate').html(moment(order.ActionDate, "x").format('DD MMM YYYY h:mm:ss a'));

        if (order.OrderMode === 'Store') {
            $('#trTotalWeight').hide();
            $('#trDeliveryDate').hide();
        }
    }

    var html = '<table class="tbl-shopping-cart-items">';

    html += '<tr class="shopping-cart-header">';
    html += '<td style="width:50px;text-align:center;">SL</td>';
    html += '<td style="width:100px;">Image</td>';
    html += '<td class="left">Name</td>';
    html += '<td class="center" style="width:150px;">Price</td>';
    html += '<td class="center" style="width:100px;">Qty</td>';
    html += '<td class="right" style="width:150px;">Total</td>';
    html += '</tr>';

    for (var i = 0; i < order.OrderItems.length; i++) {

        var item = order.OrderItems[i];

        var itemTotal = (parseFloat(item.Price, 10) * parseInt(item.Quantity, 10));

        html += '<tr>';

        html += '<td style="text-align:center;">';
        html += '<span>' + (i + 1) + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<img src="' + item.ImageUrl + '" style="" class="img-cart" />';
        html += '</td>';

        html += '<td class="left">';
        html += '<span>' + item.ProductName + '</span>';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + siteCurrency() + item.Price + '</span>';
        html += '</td>';

        html += '<td class="center">';
        html += '<span>' + item.Quantity + '</span>';
        html += '</td>';

        html += '<td class="right">';
        html += '<span>' + siteCurrency() + itemTotal + '</span>';
        html += '</td>';

        html += '</tr>';
    }

    // Getting summary calculated amount
    subTotal = order.PayAmount + order.Discount - order.Vat - order.ShippingAmount;
    discount = order.Discount;
    vatAmount = order.Vat;
    shippingAmount = order.ShippingAmount ? order.ShippingAmount : 0;
    grandTotal = order.PayAmount;
    totalQuantity = order.OrderItems.length;

    // Summary row
    html += '<tr class="summary-row right">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Sub Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + subTotal.toFixed(2) + '</span>';
    html += '</td>';

    html += '</tr>';

    // Discount row    
    if (order.Discount > 0) {
        html += '<tr class="summary-row">';

        html += '<td colspan="5">';
        html += '<span style="float:right;">(-)Discount:</span>';
        html += '</td>';

        html += '<td class="right">';
        html += '<span>' + siteCurrency() + order.Discount + '</span>';
        html += '</td>';

        html += '</tr>';
    }

    // Vat amount row    
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Vat:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + vatAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Shipping amount row
    html += '<tr class="summary-row shipping-cost">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Shipping Charge:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + shippingAmount + '</span>';
    html += '</td>';

    html += '</tr>';

    // Grand total row
    html += '<tr class="summary-row grand-total">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Grand Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + grandTotal + '</span>';
    html += '</td>';

    html += '</tr>';

    // Shipping charge note
    html += '<tr class="summary-row shipping-cost-note">';
    html += '<td colspan="6">';
    html += '<span class="" style="float:right; font-weight:400;">Note: Shipping charge will be added based on location and weight</span>';
    html += '</td>';
    html += '</tr>';

    html += '</table>';

    $('#order-details-item-list').html(html);
}

app.controller('AdminOrderDetailsCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'service', function ($rootScope, $scope, $http, $filter, $location, Enum, service) {

    var orderId = getParam('orderId');

    if (orderId) {
        getOrder(orderId);
    }

    function getOrder(orderId) {
        populateOrderDetails(orderId);        
    }

    $('#printOrder').click(function () {
        printOrder();
    });

    $('#printInvoice').click(function () {
        printInvoice();
    });
    
}]);

function populateSalesReturnOrderDetails(callback) {

    var orderId = getParam('orderId');
    $('.item-loading').show();
    var messageType = getParam('Type');

    $.ajax({
        dataType: "json",
        url: '/Customer/GetOrderDetails',
        data: { orderId: orderId },
        success: function (order) {
            $('.item-loading').hide();

            window.order = order;            
            renderSalesReturnOrderItems(window.order);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function printOrder() {
    var orderId = getParam('orderId');
    window.location.href = "/Order/PrintOrder?orderId=" + orderId;
}

function renderSalesReturnOrderItems(order) {

    var subTotal = 0;
    var vatAmount = 0;
    var shippingAmount = 0;
    var grandTotal = 0;
    var totalDiscount = 0;
    var changeAmount = 0;
    
    if (order) {
        var weight = order.TotalWeight ? order.TotalWeight + ' Kg' : '';
        var deliveryDateTime = (order.DeliveryDate && order.DeliveryTime) ? order.DeliveryDate + ' ' + (order.DeliveryTime === 'Not Specified' ? '' : order.DeliveryTime) : '';

        $('#orderCode').html(order.OrderCode);
        $('#orderMode').html(order.OrderMode);
        $('#orderStatus').html(order.OrderStatus);
        $('#totalWeight').html(weight);
        $('#deliveryDate').html(deliveryDateTime);
        $('#frozenItem').html(order.IsFrozen ? 'Yes' : 'No');
        $('#orderDate').html(moment(order.ActionDate, "x").format('DD MMM YYYY h:mm:ss a'));

        if (order.OrderMode === 'Store') {
            $('#trTotalWeight').hide();
            $('#trDeliveryDate').hide();
        }
    }

    var html = '<table class="tbl-shopping-cart-items">';

    html += '<tr class="shopping-cart-header">';
    html += '<td style="width:50px;text-align:center;">SL</td>';
    html += '<td style="width:100px;">Image</td>';
    html += '<td class="left">Name</td>';
    html += '<td class="center" style="width:150px;">Price</td>';
    html += '<td class="center" style="width:100px;">Qty</td>';
    html += '<td class="right" style="width:150px;">Total</td>';
    html += '<td class="center" style="width:20px;">Del</td>';
    html += '</tr>';

    for (var i = 0; i < order.OrderItems.length; i++) {

        var item = order.OrderItems[i];

        var itemTotal = (parseFloat(item.Price, 10) * parseInt(item.Quantity, 10));
        var quantityInputBoxId = 'txtQty_' + item.Id;
        var priceInputBoxId = 'txtPrice_' + item.Id;

        html += '<tr>';

        html += '<td style="text-align:center;">';
        html += '<span>' + (i + 1) + '</span>';
        html += '</td>';

        html += '<td>';
        html += '<img src="' + item.ImageUrl + '" style="height:80px;" class="img-orderItems" />';
        html += '</td>';

        html += '<td class="left">';
        html += '<span>' + item.ProductName + '</span>';
        html += '</td>';

        html += '<td class="center">';        
        html += '<span>' + siteCurrency() + '</span>&nbsp;';
        html += '<input type="number" min="0" class="dynamic-inputbox data-change" style="width:80px; text-align:center;" value="' + item.Price + '" itemid="' + item.Id + '" id="' + priceInputBoxId + '" />';
        html += '</td>';

        html += '<td class="center">';
        html += '<input type="number" min="0" class="dynamic-inputbox data-change" style="width:50px; text-align:center;" value="' + item.Quantity + '" itemid="' + item.Id + '" id="' + quantityInputBoxId + '" />';
        html += '</td>';

        html += '<td class="right">';
        html += '<span id="itemTotal_'+ item.Id +'">' + siteCurrency() + itemTotal + '</span>';
        html += '</td>';

        html += '<td class="center">';
        html += '<img id="' + item.Id + '" class="delete-shopping-cart-item img-cart" src="/Images/cross.png" style="cursor:pointer;">';
        html += '</td>';

        html += '</tr>';
    }

    // Getting summary calculated amount
    var obj = getSummaryValues();
    subTotal = obj.SubTotal;
    vatAmount = obj.Vat;
    shippingAmount = obj.ShippingCost;
    grandTotal = obj.GrandTotal;
    totalDiscount = obj.TotalDiscount;
    changeAmount = grandTotal - order.PayAmount;
    
    // Summary row
    html += '<tr class="summary-row right">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Sub Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span id="grandSubTotal">' + siteCurrency() + subTotal + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';

    // Discount row    
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">(-)Discount:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + '</span>&nbsp';
    html += '<input type="number" min="0" class="dynamic-inputbox discount-change" style="width:80px; text-align:right;" value="' + totalDiscount + '"/>';

    html += '</td>';
    html += '<td></td>';

    html += '</tr>';
    
    // Vat amount row    
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Vat:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span id="vat">' + siteCurrency() + vatAmount + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';

    // Shipping amount row
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Shipping Charge:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span id="shippingCost">' + siteCurrency() + shippingAmount + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';

    // Grand total row
    html += '<tr class="summary-row grand-total">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Grand Total:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span id="grandTotal">' + siteCurrency() + grandTotal + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';

    // Paid amount
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Paid Amount:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span>' + siteCurrency() + window.order.PayAmount + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';

    // Amount adjust
    html += '<tr class="summary-row">';

    html += '<td colspan="5">';
    html += '<span style="float:right;">Adjust Amount:</span>';
    html += '</td>';

    html += '<td class="right">';
    html += '<span id="grandChangeAmount">' + siteCurrency() + changeAmount + '</span>';
    html += '</td>';
    html += '<td></td>';

    html += '</tr>';
    
    html += '</table>';

    $('#order-details-item-list').html(html);
}

$('#order-details-item-list').on('change', '.data-change', function () {

    var itemId = $(this).attr('itemid');
    var qty = $('#txtQty_' + itemId).val();
    var price = $('#txtPrice_' + itemId).val();

    for (var i = 0; i < window.order.OrderItems.length; i++) {
        var item = window.order.OrderItems[i];
        if (item.Id === itemId) {
            window.order.OrderItems[i].Quantity = parseInt(qty, 10);
            window.order.OrderItems[i].Price = parseFloat(price, 10);
            break;
        }
    }

    renderSalesReturnOrderItems(window.order);
});

$('#order-details-item-list').on('change', '.discount-change', function () {
    var totalDiscount = $(this).val();
    window.order.Discount = totalDiscount;

    renderSalesReturnOrderItems(window.order);
});

function getTotalWeight() {
    var totalWeight = 0;
    return totalWeight;
}

function getSummaryValues() {

    var subtotal = 0;
    var totalDiscount = 0;
    var vat = 0;
    var shippingCost = 0;
    var grandTotal = 0;
    var changeAmount = 0;

    for (var i = 0; i < window.order.OrderItems.length; i++) {

        var item = window.order.OrderItems[i];

        var quantity = item.Quantity;
        var discount = item.Discount * quantity;
        var itemTotal = (parseFloat(item.Price, 10)) * parseInt(quantity, 10);

        subtotal += itemTotal;
        totalDiscount += discount;
    }

    if (window.order.Discount > totalDiscount) {
        var extraDiscountGiven = window.order.Discount - totalDiscount;
        totalDiscount += extraDiscountGiven;
    }

    vat = window.order.Vat > 0 ? Math.round(((subtotal - totalDiscount) * getVatPercentage()) / 100) : 0; // If Vat taken by the order then take the vat with changed items
    shippingCost = window.order.ShippingAmount > 0 ? Math.round(window.order.ShippingAmount) : 0; 

    grandTotal = subtotal - totalDiscount + vat + shippingCost;
    changeAmount = grandTotal - window.order.PayAmount;

    var obj = {};
    obj.SubTotal = subtotal;
    obj.TotalDiscount = totalDiscount;
    obj.Vat = vat;
    obj.ShippingCost = shippingCost;
    obj.GrandTotal = grandTotal;
    obj.ChangeAmount = changeAmount;

    return obj;
}

app.controller('SalesReturnCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'service', function ($rootScope, $scope, $http, $filter, $location, Enum, service) {

    var orderId = getParam('orderId');

    if (orderId) {
        populateSalesReturnOrderDetails(orderId);
    }

    $('#printOrder').click(function () {
        printOrder();
    });

    $('#printCourierSlip').click(function () {
        printCourierSlip();
    });

    $('#order-details-item-list').on('click', '.delete-shopping-cart-item', function () {
        var id = $(this).attr('id');
        removeItem(id)
        var currentTr = $(this).closest("tr");
        $(currentTr).remove();        
    });

    $('#btnUpdateOrder').click(function () {

        var order = {};
        order.OrderItems = [];

        var orderItems = window.order.OrderItems;
        var totalDiscount = 0;
        var val = 0;
        var shippingAmount = window.order.ShippingAmount;
        var grandTotal = 0;

        for (var i = 0; i < orderItems.length; i++) {

            var orderItem = {};

            var price = parseFloat(orderItems[i].Price, 10);
            var quantity = parseInt(orderItems[i].Quantity, 10);
            var discount = parseFloat(orderItems[i].Discount, 10);

            orderItem.ProductId = orderItems[i].ProductId;
            orderItem.Quantity = quantity;
            orderItem.Discount = orderItems[i].Discount; // Always 0 because discount is already reduced from price
            orderItem.Price = price;
            orderItem.TotalPrice = quantity * price;
            orderItem.ImageUrl = orderItems[i].ImageUrl;
            orderItem.Title = orderItems[i].Title;
            orderItem.CostPrice = orderItems[i].CostPrice;
            orderItem.ActionDate = moment(orderItems[i].ActionDate, "x").format('YYYY-MM-DD h:mm:ss a');
            order.OrderItems.push(orderItem);
        }

        // Getting summary calculated amount
        var obj = getSummaryValues();
        vat = obj.Vat;
        shippingAmount = obj.ShippingCost;
        grandTotal = obj.GrandTotal;
        totalDiscount = obj.TotalDiscount;
        changeAmount = grandTotal - order.PayAmount;

        order.Id = window.order.Id;
        order.UserId = window.order.UserId;
        order.BranchId = window.order.BranchId;
        order.OrderCode = window.order.OrderCode;
        order.DueAmount = window.order.DueAmount;
        order.ReceiveAmount = window.order.ReceiveAmount;
        order.ChangeAmount = window.order.ChangeAmount;
        order.OrderStatus = window.order.OrderStatus;
        order.PaymentStatus = window.order.PaymentStatus;
        order.PaymentType = window.order.PaymentType;
        order.ActionDate = moment(window.order.ActionDate, "x").format('YYYY-MM-DD h:mm:ss a');
        order.ActionType = window.order.ActionType;
        order.DeliveryDate = window.order.DeliveryDate;
        order.DeliveryTime = window.order.DeliveryTime;
        order.TotalWeight = getTotalWeight();
        order.IsFrozen = window.order.IsFrozen;
        order.OrderMode = window.order.OrderMode;
        order.PayAmount = grandTotal;
        order.Discount = totalDiscount;
        order.Vat = vat;
        order.ShippingAmount = shippingAmount;

        formData = new FormData();
        formData.append('product', JSON.stringify(order));

        // Saving Records
        $http.post('/Order/UpdateOrder', formData, {
            withCredentials: true,
            headers: { 'Content-Type': undefined },
            transformRequest: angular.identity
        }).success(function (data) {
            if (data) {
                bootbox.alert("<h4>Order updated successfully!</h4>", function () { });
            }
            else {
                bootbox.alert("<h4>Failed to update order!</h4>", function () { });
            }
            $('#updateStatus').html('');
        }).error(function (exception) {
            $('#updateStatus').html('');
            bootbox.alert("<h4>Error occured while updating order!</h4>", function () { });
        });

    });

    function removeItem(id) {

        if (id) {
            adjustDiscount(id);
            var orderItems = jQuery.removeFromArray(id, window.order.OrderItems);
            window.order.OrderItems = orderItems;
            renderSalesReturnOrderItems(window.order);
        }
        else {
            var orderItems = [];
        }
    }

    function adjustDiscount(id) {        
        for (var i = 0; i < window.order.OrderItems.length; i++) {
            var item = window.order.OrderItems[i];
            if (item.Id === id) {
                var itemDiscount = item.Quantity * item.Discount;
                window.order.Discount = window.order.Discount - itemDiscount;
                break;
            }
        }
    }

}]);

// SERVICE
app.factory('branchService', ['$http', function ($http) {

    return {

        createBranch: function (branch) {
            return $http({
                url: '/Branch/CreateBranch',
                method: 'POST',
                data: branch
            })
        },

        updateBranch: function (branch) {
            return $http({
                url: '/Branch/UpdateBranch',
                method: 'POST',
                data: branch
            })
        },

        deleteBranch: function (branch) {
            return $http({
                url: '/Branch/DeleteBranch',
                method: 'POST',
                data: branch
            })
        },

        getBranchList: function () {
            return $http.get('/Branch/GetBranchList');
        }
    };

}]);

// CONTROLLER
app.controller('BranchCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'branchService', function ($scope, $http, $window, $filter, $location, Enum, branchService) {

    getBranchList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (branch) {
        branch.editMode = !branch.editMode;
    };

    $scope.createBranch = function () {

        if (!$scope.branch.Name) {
            bootbox.alert("<h3>Please select branch name!</h3>", function () { });
            return;
        }

        var branch = {};
        branch["Id"] = $scope.branch.Id;
        branch["Name"] = $scope.branch.Name;        
        branch["IsAllowOnline"] = $scope.branch.IsAllowOnline;

        branchService.createBranch(branch)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getBranchList();
                $scope.branch.Name = '';                
                $scope.branch.IsAllowOnline = false;
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving branch');
        });
    };

    $scope.updateBranch = function (branch) {
        branchService.updateBranch(branch)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getBranchList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteBranch = function (branch) {
        var deleteConfirm = $window.confirm('Are you sure to delete branch "' + branch.Name + '"?');
        if (deleteConfirm) {
            branchService.deleteBranch(branch)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getBranchList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete branchs');
            });
        }
    };

    $scope.addAttr = function (branch) {        
        window.open('/Admin/AttributeConfig?catId=' + branch.Id + '&catName=' + branch.Name, '_blank');
    };

    function getBranchList() {
        branchService.getBranchList()
        .success(function (data) {
            $scope.branchList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);

function populateDailySalesReport(branchId, fromDate, toDate, orderMode, orderStatus, callback) {

    $('.item-loading').show();
    $.ajax({
        dataType: "json",
        url: '/Report/GetDailySales',
        data: { branchId: branchId, fromDate: fromDate, toDate: toDate, orderMode: orderMode, orderStatus: orderStatus },
        success: function (recordSet) {
            $('.item-loading').hide();
            var dataSet = [];
            if (recordSet.length > 0) {

                $('#fotter-sum').show();

                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].OrderCode);
                    record.push(recordSet[i].OrderMode);
                    record.push(recordSet[i].OrderStatus);
                    record.push(recordSet[i].ActionDateString);
                    record.push(recordSet[i].TotalCostPrice);
                    record.push(recordSet[i].ItemTotal);
                    record.push(recordSet[i].Discount);
                    record.push(recordSet[i].Vat);                    
                    record.push(recordSet[i].ShippingAmount);
                    record.push(recordSet[i].PayAmount);                    
                    record.push(recordSet[i].TotalProfit);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

$(document).ready(function () {
   
});

app.factory('dailySalesService', [
    '$http', function ($http) {

        return {
            getBranchList: function () {
                return $http.get('/Branch/GetUserBranchList');
            }
        };
    }
]);

app.controller('ReportDailySalesCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'dailySalesService', function ($rootScope, $scope, $http, $filter, $location, Enum, dailySalesService) {

    getBranchList();

    $('#dateFrom').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });
    $('#dateTo').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });

    // Get user info
    var userInfo = getUserStatus();
    if (userInfo.isAdmin) {
        window.isAdmin = true;
    }

    function getBranchList() {
        dailySalesService.getBranchList()
        .success(function (data) {
            for (var i = 0; i < data.length; i++) {
                $('#branch').append($("<option />").val(data[i].Id).text(data[i].Name));
            }
        })
        .error(function (xhr) { });
    }

    $("#branch").change(function () {
        var val = this.value;
        if (val != "") { //All Branches
            var orderMode = $('#orderMode').val();
            if (orderMode === "Online") {
                $('#orderMode').val('');
            }
        }
    });

    $("#orderMode").change(function () {
        var val = this.value;
        if (val === "Online") {
            $('#branch').val('');            
        }
    });

    $scope.showReport = function () {

        var fromDate = $('#dateFrom').val();
        var toDate = $('#dateTo').val();
        var orderMode = $('#orderMode').val();
        var orderStatus = $('#orderStatus').val();
        var branchId = $('#branch').val();

        var isAdmin = window.isAdmin && window.isAdmin === true ? true : false;

        populateDailySalesReport(branchId, fromDate, toDate, orderMode, orderStatus, function (records) {
            $('#data-table-daily-sales').dataTable({
                "data": records,
                "bLengthChange": false,
                "bFilter": true,
                //"pageLength": 100,
                "paging": false,
                "bDestroy": true,
                "order": [[1, "asc"]],
                "columns": [
                    { "title": "Order Id", "class": "center" },
                    { "title": "Order Code", "class": "center" },
                    { "title": "Order Mode" },
                    { "title": "Order Status" },
                    { "title": "Date" },
                    { "title": "Total Cost Amount", "class": "right" },
                    { "title": "Total Sells Amount", "class": "right" },
                    { "title": "Total Discount", "class": "right" },
                    { "title": "Vat", "class": "right" },                    
                    { "title": "Shipping", "class": "right" },
                    { "title": "Total Paid Amount", "class": "right" },                    
                    { "title": "Sells Profit", "class": "right" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [5,6,7,8,9,10,11],
                        "sorting": false
                    },
                    {
                        "aTargets": [0,2],
                        "visible": false
                    },
                    {
                        "aTargets": [1],
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Order/OrderDetails?orderId=' + row[0] + '>' + row[1] + '</a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [3],
                        "mRender": function (data, type, row) {

                            var status = row[3];
                            var className = 'order-status-processing';

                            if (status === 'Completed') {
                                className = 'order-status-completed';
                            }
                            else if (status === 'Processing') {
                                className = 'order-status-processing';
                            }

                            var text = '<span class="' + className + '">' + status + '</span>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [4],
                        "bSortable": false
                    },
                    {
                        "aTargets": [5,11],
                        "visible": isAdmin
                    }
                ],                
                "fnFooterCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                            i : 0;
                    };

                    // Total column 5 ----------------------------------------------
                    var columnNo5 = 5;

                    // Total over all pages
                    var total = api.column(columnNo5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    var pageTotal = api.column(columnNo5, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo5).footer()).html(pageTotal);

                    // Total column 6 ----------------------------------------------
                    var columnNo6 = 6;

                    // Total over all pages
                    total = api.column(columnNo6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo6, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo6).footer()).html(pageTotal);

                    // Total column 7 ----------------------------------------------
                    var columnNo7 = 7;

                    // Total over all pages
                    total = api.column(columnNo7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo7, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo7).footer()).html(pageTotal);


                    // Total column 8 ----------------------------------------------
                    var columnNo8 = 8;

                    // Total over all pages
                    total = api.column(columnNo8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo8, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo8).footer()).html(pageTotal);

                    // Total column 9 ----------------------------------------------
                    var columnNo9 = 9;

                    // Total over all pages
                    total = api.column(columnNo9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo9, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo9).footer()).html(pageTotal);

                    // Total column 10 ----------------------------------------------
                    var columnNo10 = 10;

                    // Total over all pages
                    total = api.column(columnNo10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo10, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo10).footer()).html(pageTotal);

                    // Total column 11 ----------------------------------------------
                    var columnNo11 = 11;

                    // Total over all pages
                    total = api.column(columnNo11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Total over this page
                    pageTotal = api.column(columnNo11, { page: 'current' }).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                    // Update footer
                    $(api.column(columnNo11).footer()).html(pageTotal);

                } // end footercallback


            });
        });
    }
       
}]);


// SERVICE CALL
app.factory('registerService', [
    '$http', function ($http) {

        return {
            registerAccount: function (user) {
                return $http({
                    url: '/Account/RegisterAccount',
                    method: 'POST',
                    data: user
                });
            }
        };
    }
]);

// CONTROLLER
app.controller('RegisterCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'registerService',    function ($rootScope, $scope, $http, $window, $filter, $location, Enum, registerService) {

    allowGuestCheckout();

    $scope.numberOnly = function (e) {
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return;
        }
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }

    function isGuest() {
        var param = getParam('guest');
        if (param === 'true') {
            return true;
        }
        else {
            return false;
        }
    }

    function allowGuestCheckout() {
        if (isGuest()) {
            $('.row-login-credential').hide();
            $('#btnRegister').html('Continue');
        }
    }

    function showCreateAccountLoader() {
        $('.create-account-loading').show();
    }

    function hideCreateAccountLoader() {
        $('.create-account-loading').hide();
    }
    
    $scope.login = function () {
        window.location.href = "/Security/Login";
    }    

    $scope.registerAccount = function (form) {

        $scope.submitted = true;
        if ($scope.myForm.$invalid) {
            return false;
        }

        // Validation
        if (!isGuest()) {
            if (!$scope.Username) {
                bootbox.alert("<h4>Please enter your mobile!</h4>", function () { });
                return;
            }
            else if (!$scope.Password) {
                bootbox.alert("<h4>Please enter your password!</h4>", function () { });
                return;
            }
        }

        if (!$scope.FirstName) {
            bootbox.alert("<h4>Please enter your first name!</h4>", function () { });
            return;
        }        

        $scope.submitted = true;
        setButtonState('btnRegister', true);
        showCreateAccountLoader();


        var userName = '';
        var password = '';

        if (isGuest()) {
            userName = 'guest_' + Date.now();
            password = 'guest';
        }
        else {
            userName = $scope.Username;
            password = $scope.Password;
        }

        var user = {};
        user["Username"] = userName;
        user["Password"] = password;        
        user["FirstName"] = $scope.FirstName;
        user["LastName"] = $scope.LastName;
        user["ShipAddress"] = $scope.ShipAddress;        

        registerService.registerAccount(user)
            .success(function (data) {
                if (data.isSuccess) {
                    if (isGuest()) {
                        window.location.href = '/Cart?step=confirm-order';
                    }
                    else {
                        window.location.href = '/Customer/Index';
                    }
                } else {
                    if (isGuest()) {
                        bootbox.alert("<h4>Failed to continue!</h4>", function () { });
                    }
                    else {
                        if (data.message) {
                            bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                        }
                        else {
                            bootbox.alert("<h4>Failed to register your account. Please contact with site admin!</h4>", function () { });
                        }
                    }
                }

                setButtonState('btnRegister', false);
                hideCreateAccountLoader();
            })
            .error(function (xhr) {
                bootbox.alert("<h4>Error occured while registering your account. Please contact with site admin!</h4>", function () { });
                setButtonState('btnRegister', false);
                hideCreateAccountLoader();
            });
    };
}]);
// SERVICE
app.factory('supplierService', ['$http', function ($http) {

    return {

        createSupplier: function (supplier) {
            return $http({
                url: '/Supplier/CreateSupplier',
                method: 'POST',
                data: supplier
            })
        },

        updateSupplier: function (supplier) {
            return $http({
                url: '/Supplier/UpdateSupplier',
                method: 'POST',
                data: supplier
            })
        },

        deleteSupplier: function (supplier) {
            return $http({
                url: '/Supplier/DeleteSupplier',
                method: 'POST',
                data: supplier
            })
        },

        getSupplierList: function () {
            return $http.get('/Supplier/GetSupplierList');
        }
    };

}]);

// CONTROLLER
app.controller('SupplierCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'supplierService', function ($scope, $http, $window, $filter, $location, Enum, supplierService) {

    getSupplierList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (supplier) {
        supplier.editMode = !supplier.editMode;
    };

    $scope.createSupplier = function () {

        if (!$scope.supplier.Name) {
            bootbox.alert("<h3>Please select supplier name!</h3>", function () { });
            return;
        }

        var supplier = {};
        supplier["Id"] = $scope.supplier.Id;
        supplier["Name"] = $scope.supplier.Name;                

        supplierService.createSupplier(supplier)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getSupplierList();
                $scope.supplier.Name = '';                                
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving supplier');
        });
    };

    $scope.updateSupplier = function (supplier) {
        supplierService.updateSupplier(supplier)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getSupplierList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteSupplier = function (supplier) {
        var deleteConfirm = $window.confirm('Are you sure to delete supplier "' + supplier.Name + '"?');
        if (deleteConfirm) {
            supplierService.deleteSupplier(supplier)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getSupplierList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete suppliers');
            });
        }
    };

    $scope.addAttr = function (supplier) {        
        window.open('/Admin/AttributeConfig?catId=' + supplier.Id + '&catName=' + supplier.Name, '_blank');
    };

    function getSupplierList() {
        supplierService.getSupplierList()
        .success(function (data) {
            $scope.supplierList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);
// SERVICE
app.factory('itemTypeService', ['$http', function ($http) {

    return {

        createItemType: function (itemType) {
            return $http({
                url: '/ItemType/CreateItemType',
                method: 'POST',
                data: itemType
            })
        },

        updateItemType: function (itemType) {
            return $http({
                url: '/ItemType/UpdateItemType',
                method: 'POST',
                data: itemType
            })
        },

        deleteItemType: function (itemType) {
            return $http({
                url: '/ItemType/DeleteItemType',
                method: 'POST',
                data: itemType
            })
        },

        getItemTypeList: function () {
            return $http.get('/ItemType/GetItemTypeList');
        }
    };

}]);

// CONTROLLER
app.controller('ItemTypeCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'itemTypeService', function ($scope, $http, $window, $filter, $location, Enum, itemTypeService) {

    getItemTypeList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (itemType) {
        itemType.editMode = !itemType.editMode;
    };

    $scope.createItemType = function () {

        if (!$scope.itemType.Name) {
            bootbox.alert("<h3>Please select itemType name!</h3>", function () { });
            return;
        }

        var itemType = {};
        itemType["Id"] = $scope.itemType.Id;
        itemType["Name"] = $scope.itemType.Name;                

        itemTypeService.createItemType(itemType)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getItemTypeList();
                $scope.itemType.Name = '';                                
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving itemType');
        });
    };

    $scope.updateItemType = function (itemType) {
        itemTypeService.updateItemType(itemType)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getItemTypeList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteItemType = function (itemType) {
        var deleteConfirm = $window.confirm('Are you sure to delete itemType "' + itemType.Name + '"?');
        if (deleteConfirm) {
            itemTypeService.deleteItemType(itemType)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getItemTypeList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete itemTypes');
            });
        }
    };

    $scope.addAttr = function (itemType) {        
        window.open('/Admin/AttributeConfig?catId=' + itemType.Id + '&catName=' + itemType.Name, '_blank');
    };

    function getItemTypeList() {
        itemTypeService.getItemTypeList()
        .success(function (data) {
            $scope.itemTypeList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);
function populateRecordSet( callback) {

    $.ajax({
        dataType: "json",
        url: '/UserManagement/GetUserList',
        success: function (recordSet) {
            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].Name);                    
                    record.push(recordSet[i].Username);
                    record.push(recordSet[i].Password);
                    record.push(recordSet[i].Code);
                    record.push(recordSet[i].IsActive);
                    record.push(recordSet[i].RoleNames);
                    record.push(recordSet[i].BranchNames);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            var error = xhr;
        }
    });
}

function deleteUser(id, callback) {

    $.ajax({
        dataType: "json",
        url: '/UserManagement/DeleteUser',
        data: { userId: id },
        method: 'POST',
        async: false,
        success: function (data) {
            if (data.isSuccess) {
                bootbox.alert("<h4>User has been deleted sucessfully</h4>", function () { });
                callback();
            }
            else {
                bootbox.alert("<h4>Error occured. Failed to delete this user</h4>", function () { });
            }
        },
        error: function (xhr) {
            bootbox.alert("<h4>Error occured while deleting user!</h4>", function () { });
        }
    });
}

function bindGrid() {
    populateRecordSet(function (records) {
        $('#userMgtList-datatable').dataTable({
            "data": records,
            "pageLength": 50,
            "bDestroy": true,
            "columns": [
                { "title": "Id" },
                { "title": "Name" },
                { "title": "Username" },
                { "title": "Password" },
                { "title": "Code" },
                { "title": "Active", "class": "center" },
                { "title": "Roles" },
                { "title": "Branches" },
                { "title": "Action", "class": "center" }
            ],
            "aoColumnDefs": [
                {
                    "aTargets": [0],
                    "bVisible": false
                },
                {
                    "aTargets": [8],
                    "searchable": false,
                    "mRender": function (data, type, row) {
                        var buttons = '<span title="Edit User" id="' + row[0] + '" class="editBtn glyphicon glyphicon-edit"></span>&nbsp;&nbsp;&nbsp;';
                        buttons += '<span title="Delete User" id="' + row[0] + '" name="' + row[1] + '" class="deleteBtn glyphicon glyphicon-remove cursor-pointer"></span>';
                        return $("<div/>").append(buttons).html();
                    }
                }
            ]
        });
    });
}

app.factory('userManagementListService', [
    '$http', function ($http) {

        return {

        };
    }
]);

app.controller('UserManagementListCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'userManagementListService', function ($rootScope, $scope, $http, $filter, $location, Enum, userManagementListService) {
    
    bindGrid();

    $('#userMgtList-datatable').on('click', '.editBtn', function () {
        var id = $(this).attr('id');
        window.location.href = "/UserManagement/CreateUser?id=" + id;
    });

    $('#userMgtList-datatable').on('click', '.deleteBtn', function () {
        var id = $(this).attr('id');
        var name = $(this).attr('name');
        var currentTr = $(this).closest("tr");

        bootbox.confirm("<h4>Are you sure to delete this user?</h4>",
            function (result) {
                if (result) {
                    deleteUser(id, function () { $(currentTr).remove(); });
                }
            });
    });

}]);

app.factory('roleService', [
    '$http', function ($http) {

        return {
            createUser: function (user) {
                return $http({
                    url: '/UserManagement/CreateUser',
                    method: 'POST',
                    data: user
                });
            },

            getUser: function (id) {
                return $http({
                    url: '/UserManagement/GetUser?userId=' + id,
                    method: 'GET'
                });
            },

            getRoles: function () {
                return $http({
                    url: '/UserManagement/GetManagementRoles',
                    method: 'GET',
                    async: false
                });
            },

            getBranchList: function () {
                return $http({
                    url: '/Branch/GetBranchList',
                    method: 'GET',
                    async: false
                });
            }
        };

    }
]);

// CONTROLLER
function userCtrl($rootScope, $scope, $http, $filter, $location, Enum, roleService) {
    
    populateRoleList();
    populateBranchList();

    $scope.IsActive = true;

    // Populate student info for edit mode
    if (isEditModel()) {
        var userId = getParam("id");
        roleService.getUser(userId)
            .success(function (data) {
                populateUser(data);
            })
            .error(function (xhr) {
                bootbox.alert("<h4>User not found!</h4>", function () { });
            });
    }

    function getPermissionNames() {

        var valueChecked = '';

        if ($('#ckbProduct').is(':checked')) {
            valueChecked += 'product-m;';
        }
        if ($('#ckbAddProduct').is(':checked')) {
            valueChecked += 'addProduct-sm;';
        }
        if ($('#ckbProductList').is(':checked')) {
            valueChecked += 'productList-sm;';
        }
        if ($('#ckbPurchase').is(':checked')) {
            valueChecked += 'purchase-m;';
        }
        if ($('#ckbCustomer').is(':checked')) {
            valueChecked += 'customer-m;';
        }
        if ($('#ckbManageStock').is(':checked')) {
            valueChecked += 'manageStock-m;';
        }
        if ($('#ckbOrder').is(':checked')) {
            valueChecked += 'order-m;';
        }
        if ($('#ckbConfiguration').is(':checked')) {
            valueChecked += 'configuration-m;';
        }
        if ($('#ckbReport').is(':checked')) {
            valueChecked += 'report-m;';
        }
        if ($('#ckbSetting').is(':checked')) {
            valueChecked += 'setting-sm;';
        }

        return valueChecked;
    }

    $scope.createUser = function () {

        $scope.submitted = true;

        // Return if form is invalid
        if ($scope.myForm.$invalid) {
            return false;
        }

        // Check role is selected or not
        if (!$scope.SelectedRoles || $scope.SelectedRoles.length === 0) {
            bootbox.alert("<h4>Please select a role!</h4>", function () { });
            return;
        }

        // Ge the permissions
        var permissions = getPermissionNames();

        // User Info
        var user = {};
        user["Id"] = getParam("id");
        user["FirstName"] = $scope.FirstName;
        user["LastName"] = $scope.LastName;
        user["Username"] = $scope.Username;
        user["Password"] = $scope.Password;
        user["Code"] = $scope.Code;
        user["Permissions"] = permissions;
        user["IsActive"] = $scope.IsActive;

        // Roles
        var userRoles = [];
        for (var i = 0; i < $scope.SelectedRoles.length; i++) {
            userRoles.push({ RoleId: $scope.SelectedRoles[i] });
        }
        user["UserRoles"] = userRoles;

        // Branches
        var userBranches = [];
        for (var i = 0; i < $scope.SelectedBranches.length; i++) {
            userBranches.push({ BranchId: $scope.SelectedBranches[i] });
        }
        user["UserBranches"] = userBranches;

        // Disable the submit button
        setButtonState('btnSave', true);

        // Calling service
        roleService.createUser(user)
            .success(function (data) {
                if (data.isSuccess) {
                    if (isEditModel()) {
                        showAlertMessage(true, "User has been updated successfully");
                    }
                    else {
                        showAlertMessage(true, "User has been created successfully");
                    }

                    window.location.href = '/UserManagement/UserList';

                } else {
                    if (data.message) {
                        bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Error Occured!</h4>", function () { });
                    }
                }

                // Enable the submit button
                setButtonState('btnSave', false);
            })
            .error(function (xhr) {
                alert('error in saving data');

                // Enable the submit button
                setButtonState('btnSave', false);
            });
    };

    function clearControls() {
        $scope.FirstName = '';
        $scope.LastName = '';
        $scope.Username = '';
        $scope.Password = '';
        $scope.Code = '';
        $scope.SelectedRoles = [];
    }

    function isEditModel() {
        if (window.location.search !== '') {
            return true;
        } else {
            return false;
        }
    }


    function populateRoleList() {
        roleService.getRoles()
        .success(function (data) {
            $scope.roles = data;
        })
        .error(function (xhr) {
            bootbox.alert("<h4>Error! Failed to load role list!</h4>", function () { });
        });
    }

    function populateBranchList() {
        roleService.getBranchList()
        .success(function (data) {
            $scope.branchList = data;
        })
        .error(function (xhr) {
            bootbox.alert("<h4>Error! Failed to load branch list!</h4>", function () { });
        });
    }

    function populateUser(user) {
        $scope.FirstName = user.FirstName;
        $scope.LastName = user.LastName;
        $scope.Username = user.Username;
        $scope.Password = user.Password;
        $scope.Code = user.Code;
        $scope.IsActive = user.IsActive;
        $scope.SelectedRoles = [];
        $scope.SelectedBranches = [];

        populatePermissions(user.Permissions);

       for (var i = 0; i < user.RoleList.length; i++) {
            $scope.SelectedRoles.push(user.RoleList[i].Id);
       }

       for (var i = 0; i < user.BranchList.length; i++) {
           $scope.SelectedBranches.push(user.BranchList[i].Id);
       }

    }

    function populatePermissions(permissions) {

        $('#ckbProduct').prop('checked', false);
        $('#ckbAddProduct').prop('checked', false);
        $('#ckbProductList').prop('checked', false);
        $('#ckbPurchase').prop('checked', false);
        $('#ckbCustomer').prop('checked', false);
        $('#ckbManageStock').prop('checked', false);
        $('#ckbOrder').prop('checked', false);
        $('#ckbConfiguration').prop('checked', false);
        $('#ckbReport').prop('checked', false);
        $('#ckbSetting').prop('checked', false);

        var items = permissions.split(';');
        for (var i = 0; i < items.length; i++) {
            var item = items[i];

            if (item === 'product-m') {
                $('#ckbProduct').prop('checked', true);
            }
            else if (item === 'addProduct-sm') {
                $('#ckbAddProduct').prop('checked', true);
            }
            else if (item === 'productList-sm') {
                $('#ckbProductList').prop('checked', true);
            }
            else if (item === 'purchase-m') {
                $('#ckbPurchase').prop('checked', true);
            }
            else if (item === 'customer-m') {
                $('#ckbCustomer').prop('checked', true);
            }
            else if (item === 'manageStock-m') {
                $('#ckbManageStock').prop('checked', true);
            }
            else if (item === 'order-m') {
                $('#ckbOrder').prop('checked', true);
            }
            else if (item === 'configuration-m') {
                $('#ckbConfiguration').prop('checked', true);
            }
            else if (item === 'report-m') {
                $('#ckbReport').prop('checked', true);
            }
            else if (item === 'setting-sm') {
                $('#ckbSetting').prop('checked', true);
            }
        }
    }
}
function populateBranchList() {    
    $.ajax({
        dataType: "json",
        url: '/Branch/GetBranchList',
        success: function (recordSet) {
            $.each(recordSet, function () {
                $('#branchList').append($("<option />").val(this.Id).text(this.Name));
            });  
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function populateItemTypeList() {
    $.ajax({
        dataType: "json",
        url: '/ItemType/GetItemTypeList',
        success: function (recordSet) {
            $.each(recordSet, function () {
                $('#itemTypeList').append($("<option />").val(this.Id).text(this.Name));
            });
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function populateSupplierList() {
    $.ajax({
        dataType: "json",
        url: '/Supplier/GetSupplierList',
        success: function (recordSet) {
            $.each(recordSet, function () {
                $('#supplierList').append($("<option />").val(this.Id).text(this.Name));
            });
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function populateCategoryList() {
    $.ajax({
        dataType: "json",
        url: '/Category/GetParentCategoryList',
        success: function (recordSet) {
            $.each(recordSet, function () {
                $('#categoryList').append($("<option />").val(this.Id).text(this.Name));
            });
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function getLowStockItemCount() {
    $.ajax({
        dataType: "json",
        url: '/Admin/GetLowStockCount',
        success: function (data) {            
            $('#lowStockItemCount').html(data);
        },
        error: function (xhr) {
            
        }
    });
}

function populateProductList(pageNo, isRenderPaging, callback) {

    var branchId = $('#branchList').val();
    var categoryId = $('#categoryList').val();
    var itemTypeId = $('#itemTypeList').val();
    var attribute = $('#attributeList').val();
    var lowStock = $('#lowStock').val();
    var supplierId = $('#supplierList').val();
    var searchText = $('#txt-search').val();    

    $('.item-loading').show();
    blockFilterArea(true);

    $.ajax({
        dataType: "json",
        url: '/Admin/GetAdminProductList',
        data: { pageNo: pageNo, searchText: searchText, branchId: branchId, categoryId: categoryId, itemTypeId: itemTypeId, supplierId: supplierId, attribute: attribute, lowStock: lowStock },
        success: function (data) {
            $('.item-loading').hide();
            blockFilterArea(false);
            var dataSet = [];

            $('#totalRecordFound').html("Total <b>" + data.totalRecords + "</b> records found");

            if (data.recordList.length > 0) {
                for (var i = 0; i < data.recordList.length; i++) {

                    var recordSet = data.recordList[i];

                    var record = [];
                    record.push(recordSet.Id);
                    record.push(recordSet.PrimaryImageName);
                    record.push(recordSet.Barcode);
                    record.push(recordSet.Title);
                    record.push(recordSet.Quantity);
                    record.push(recordSet.CostPriceText);
                    record.push(recordSet.PriceText);
                    record.push(recordSet.DiscountText);
                    record.push(recordSet.LowStockAlert);
                    record.push(recordSet.ItemTypeName);
                    record.push(recordSet.Attributes);

                    dataSet.push(record);
                }                
            }
            
            // Render pagination
            if (isRenderPaging) {
                $('#pagination-ul').remove();
                $('.pagination-container').html('<ul id="pagination-ul" class="pagination-md"></ul>').show();

                $('#pagination-ul').twbsPagination({
                    totalPages: data.totalPages,
                    visiblePages: 9,
                    initiateStartPageClick: false,
                    onPageClick: function (event, pageNo) {
                        populateProducts(pageNo, false);
                    }
                });
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
            blockFilterArea(false);
        }
    });
}

function deleteProduct(productId, callback) {
    $.ajax({
        dataType: "json",
        url: '/Admin/DeleteProduct',
        data: { productId: productId },
        success: function (data) {
            if (data.IsSuccess) {
                bootbox.alert("<h4>product has been deleted sucessfully</h4>", function () { });
                callback();
            }
            else {
                bootbox.alert("<h4>Operation failed!</h4>", function () { });
            }
        },
        error: function (xhr) {
            bootbox.alert("<h4>Error occured while deleting product!</h4>", function () { });
        }
    });
}

function blockFilterArea(isBlock) {

    if (!isBlock) {
        $("#tbl-wrap").css({ top: 0, left: 0, width: 0, height: 0 });
        return;
    }

    var filterLeft = $('.tbl-filter').position().left;
    var filterTop = $('.tbl-filter').position().top;
    var filterWidth = $('.tbl-filter').width();
    var filterHeight = $('.tbl-filter').height();

    $("#tbl-wrap").css({ top: filterTop, left: filterLeft, width: filterWidth, height: filterHeight });
}

function populateProducts(pageNo, isRenderPaging) {

    $('#dt-myProducts tbody').empty();
    $('#dt-myProducts_wrapper').hide();

    var that = this;

    var isLoad = getParam('load');
    if (isLoad) {
        populateProductList(pageNo, isRenderPaging, function (records) {

            $('#dt-myProducts_wrapper').show();

            $('#dt-myProducts').dataTable({
                "data": records,
                "destroy": true,
                "bLengthChange": false,
                "bFilter": true,
                "bSort" : false,
                "paging": false,
                "bFilter": false,
                "bInfo": false,
                "pageLength": 10,
                "fixedColumns":   {
                    leftColumns: 2,
                    rightColumns: 1
                },
                "fixedHeader": true,

                dom: "<'row'<'col-sm-6'f><'col-sm-6'p>>" +
                     "<'row'<'col-sm-12'tr>>" +
                     "<'row'<'col-sm-5'i><'col-sm-7'p>>",

                "columns": [
                    { "title": "Id" },
                    { "title": "Image" },
                    { "title": "Barcode" },
                    { "title": "Title" },                    
                    { "title": "Qty", "class": "center" },
                    { "title": "Cost<br/>Price", "class": "right" },
                    { "title": "Sells Price", "class": "left" },
                    { "title": "Discount", "class": "left" },                    
                    { "title": "Stock<br/>Alert", "class": "center" },
                    { "title": "Action", "class": "center", "width": "100px" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [0],
                        "visible": false
                    },
                    {
                        "aTargets": [1],
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Product/Details/?id=' + row[0] + '>' + '<img alt="" style="width:70px;" src="' + row[1] + '"/> </a>';
                            return $("<div/>").append(text).html();
                        }
                    },
                    {
                        "aTargets": [2],
                        "sortable": false
                    },
                    {
                        "aTargets": [6,7],
                        "sortable": false
                    },
                    {
                        "aTargets": [3],
                        "mRender": function (data, type, row) {
                            var text = '<a href=/Product/Details/?id=' + row[0] + '>' +  row[3] + '</a>';
                            return $("<div/>").append(text).html();
                        }
                    },                    
                    {
                        "aTargets": [9],
                        "searchable": false,
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var buttons = '<div><a title="Edit Product" id=' + row[0] + ' class="edit-product cursor-pointer"><b>Edit</b></a></div>';
                            buttons += '<div class="ad-action"><a title="Delete Product" id=' + row[0] + ' class="delete-product cursor-pointer">Delete</a></div>';
                            buttons += '<div class="ad-action"><a title="Manage Product Image" id=' + row[0] + ' class="manage-photo cursor-pointer">Add Photo</a></div>';
                            buttons += '<div class="ad-action"><a title="Edit Category Image" id=' + row[0] + ' class="edit-category cursor-pointer">Edit Category</a></div>';
                            //buttons += '<div class="ad-action"><a title="Attribute" id=' + row[0] + ' class="attribute-variation cursor-pointer">Price/Stock</a></div>';
                            return $("<div/>").append(buttons).html();
                        }
                    }
                ]
            });
        });
       
    }
}

app.factory('adminProductListService', [
    '$http', function ($http) {

        return {
        };
    }
]);

app.controller('AdminProductListCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'adminProductListService', function ($rootScope, $scope, $http, $filter, $location, Enum, adminProductListService) {

    getLowStockItemCount();
    populateBranchList();
    populateCategoryList();
    populateSupplierList();
    populateItemTypeList();
    populateProducts(1, true);

    $('#dt-myProducts').on('click', '.delete-product', function () {
        var productId = $(this).attr('id');
        var currentTr = $(this).closest("tr");

        bootbox.confirm("<h4>Are you sure to delete this product?</h4>",
            function (result) {
                if (result) {
                    deleteProduct(productId, function () { $(currentTr).remove(); });
                }
            });
    });

    $('#dt-myProducts').on('click', '.edit-product', function () {
        var productId = $(this).attr('id');
        window.location.href = '/ProductEntry/EditPost?id=' + productId;
    });

    $('#dt-myProducts').on('click', '.edit-category', function () {
        var productId = $(this).attr('id');
        window.location.href = '/ProductEntry/EditCategory?id=' + productId;
    });

    $('#dt-myProducts').on('click', '.manage-photo', function () {
        var productId = $(this).attr('id');
        window.location.href = '/Photo/ManagePhoto?id=' + productId;
    });

    $('#dt-myProducts').on('click', '.attribute-variation', function () {
        var productId = $(this).attr('id');
        window.location.href = '/ProductEntry/AttributeVariation?productId=' + productId;
    });

    $('#btn-search-item').on('click', function () {
        var searchText = $('#txt-search').val();
        populateProducts(1, true);
    });

    $('#btnFilterProduct').on('click', function () {        
        populateProducts(1, true);
    });

    $("#branchList").change(function () { 
        populateProducts(1, true);
    });

    $("#categoryList").change(function () {
        populateProducts(1, true);
    });

    $("#supplierList").change(function () {
        populateProducts(1, true);
    });

    $("#itemTypeList").change(function () {
        populateProducts(1, true);
    });

    $("#attributeList").change(function () {
        populateProducts(1, true);
    });

    $("#lowStock").change(function () {
        populateProducts(1, true);
    });

    $scope.showHideBarcodeScanner = function () {

        var isVisible = $('#barcode-reader-container').is(":visible");
        if (isVisible) {
            $('#barcode-reader-container').hide();
        }
        else {
            $('#barcode-reader-container').show();

            var html5QrcodeScanner = new Html5QrcodeScanner("barcode-reader", { fps: 10, qrbox: 250 });
            var lastResult, countResults = 0;

            html5QrcodeScanner.render(onScanSuccess, onScanError);

            $('a', '#barcode-reader').hide();

            function onScanSuccess(decodedText, decodedResult) {

                if (decodedText !== lastResult) {
                    lastResult = decodedText;

                    $('#txt-search').val(decodedText);
                    document.getElementById("barcode-reader-container").style.display = "none";

                }
            }

            function onScanError(qrCodeError) {
            }
        }
    }

}]);
// SERVICE
app.factory('categoryService', ['$http', function ($http) {

    return {

        createCategory: function (category) {
            return $http({
                url: '/Category/CreateCategory',
                method: 'POST',
                data: category
            })
        },

        updateCategory: function (category) {
            return $http({
                url: '/Category/UpdateCategory',
                method: 'POST',
                data: category
            })
        },

        deleteCategory: function (category) {
            return $http({
                url: '/Category/DeleteCategory',
                method: 'POST',
                data: category
            })
        },

        getCategoryList: function () {
            return $http.get('/Category/GetCategoryList');
        }
    };

}]);

// CONTROLLER
app.controller('CategoryCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'categoryService', function ($scope, $http, $window, $filter, $location, Enum, categoryService) {

    getCategoryList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (category) {
        category.editMode = !category.editMode;
    };

    $scope.createCategory = function () {

        if (!$scope.category.Name) {
            bootbox.alert("<h3>Please select category name!</h3>", function () { });
            return;
        }

        var category = {};
        category["Id"] = $scope.category.Id;
        category["Name"] = $scope.category.Name;
        category["ParentId"] = $scope.category.ParentId;
        category["IsPublished"] = $scope.category.IsPublished;
        category["ShowInHomepage"] = $scope.category.ShowInHomepage;
        category["DisplayOrder"] = $scope.category.DisplayOrder;

        categoryService.createCategory(category)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getCategoryList();
                $scope.category.Name = '';
                $scope.category.DisplayOrder = '';
                $scope.category.IsPublished = false;
                $scope.category.HowInHomepage = false;
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving category');
        });
    };

    $scope.updateCategory = function (category) {
        categoryService.updateCategory(category)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getCategoryList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteCategory = function (category) {
        var deleteConfirm = $window.confirm('Are you sure to delete category "' + category.Name + '"?');
        if (deleteConfirm) {
            categoryService.deleteCategory(category)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getCategoryList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete categorys');
            });
        }
    };

    $scope.addPhoto = function (category) {        
        window.open('/Category/CategoryPhoto?catId=' + category.Id + '&catName=' + category.Name, '_blank');
    };

    function getCategoryList() {
        categoryService.getCategoryList()
        .success(function (data) {
            $scope.categoryList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);
$(document).ready(function () {

    $("#inputFile").change(function () {
        readURL(this);
    });

    $("#inputIconFile").change(function () {
        readIconURL(this);
    });

    $("#btnPhotoCancel").click(function () {
        $('#imgTemp').attr('src', '/Images/no-image.png');
        $('#divSavePhoto').hide();
    });

    $("#btnIconCancel").click(function () {
        $('#iconTemp').attr('src', '/Images/no-image.png');
        $('#divSaveIcon').hide();
    });

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgTemp').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);

            $('#divSavePhoto').show();
        }
    }

    function readIconURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#iconTemp').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);

            $('#divSaveIcon').show();
        }
    }
});

// SERVICE
app.factory('categoryPhotoService', ['$http', function ($http) {

      return {
        savePhoto: function (catId, formData) {
            return $http.post('/Category/SaveCategoryPhoto?catId=' + catId, formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getCategoryPhoto: function (catId) {
            return $http({
                url: '/Category/GetCategoryPhoto',
                method: 'GET',
                params: { catId: catId },
                cache: false
            });
        },

        deletePhoto: function (catId) {
            return $http({
                url: '/Category/DeleteCategoryPhoto',
                method: 'GET',
                params: { catId: catId }
            });
        },

        saveIcon: function (catId, formData) {
            return $http.post('/Category/SaveCategoryIcon?catId=' + catId, formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getCategoryIcon: function (catId) {
            return $http({
                url: '/Category/GetCategoryIcon',
                method: 'GET',
                params: { catId: catId },
                cache: false
            });
        },

        deleteIcon: function (catId) {
            return $http({
                url: '/Category/DeleteCategoryIcon',
                method: 'POST',
                data: { catId: catId }
            });
        }
    };

   }
]);

// CONTROLLER
app.controller('categoryPhotoCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'categoryPhotoService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, categoryPhotoService) {

    var categoryId = getParam('catId');
    $scope.IsFileValid = false;

    loadPhoto();
    loadIcon();

    function loadPhoto() {
        categoryPhotoService.getCategoryPhoto(categoryId)
            .success(function (data) {
                $scope.ImageName = data.imageName;
            })
            .error(function (xhr) {
            });
    };

    function loadIcon() {
        categoryPhotoService.getCategoryIcon(categoryId)
            .success(function (data) {
                $scope.IconName = data.iconName;
            })
            .error(function (xhr) {
            });
    };
    
    $scope.selectPhoto = function (files) {
        $scope.categoryPhoto = files[0];
    };

    $scope.selectIcon = function (files) {
        $scope.categoryIcon = files[0];
    };

    $scope.deletePhoto = function () {
        bootbox.confirm("<h4>Are you sure to delete this image?</h4>",
            function (result) {
                if (result) {
                    categoryPhotoService.deletePhoto(categoryId)
                        .success(function (data) {
                            if (data.isSuccess) {
                                loadPhoto();
                            }
                            else {
                                bootbox.alert("<h4>Failed to delete this image!</h4>", function () { });
                            }
                        })
                        .error(function (exception) {
                            bootbox.alert("<h4>Error occured while deleting this image!</h4>", function () { });
                        });
                }
            });
    }

    $scope.deleteIcon = function () {
        bootbox.confirm("<h4>Are you sure to delete this icon?</h4>",
            function (result) {
                if (result) {
                    categoryPhotoService.deleteIcon(categoryId)
                        .success(function (data) {
                            if (data.isSuccess) {
                                loadIcon();
                            }
                            else {
                                bootbox.alert("<h4>Failed to delete this icon!</h4>", function () { });
                            }
                        })
                        .error(function (exception) {
                            bootbox.alert("<h4>Error occured while deleting this icon!</h4>", function () { });
                        });
                }
            });
    }

    $scope.uploadPhoto = function () {
        $scope.submitted = true;

        if ($scope.myForm.$invalid) {
            return false;
        }

        savePhoto();
    };

    $scope.uploadIcon = function () {
        $scope.submitted = true;

        if ($scope.myForm.$invalid) {
            return false;
        }

        saveIcon();
    };

    var savePhoto = function () {
        var file = $scope.categoryPhoto;
        var formData = new FormData();
        formData.append("file", file);

        categoryPhotoService.savePhoto(categoryId, formData)
        .success(function (data) {
            if (data.isSuccess) {
                loadPhoto();

                $('#imgTemp').attr('src', '/Images/no-image.png');
                $('#divSavePhoto').hide();

            }
            else {
                bootbox.alert("<h4>" + data.message + "</h4>", function () { });
            }
        })
        .error(function (exception) {
            bootbox.alert("<h4>Error while saving your photo!</h4>", function () { });
        });

    };

    var saveIcon = function () {
        var file = $scope.categoryIcon;
        var formData = new FormData();
        formData.append("file", file);

        categoryPhotoService.saveIcon(categoryId, formData)
            .success(function (data) {
                if (data.isSuccess) {
                    loadIcon();

                    $('#iconTemp').attr('src', '/Images/no-image.png');
                    $('#divSaveIcon').hide();

                }
                else {
                    bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                }
            })
            .error(function (exception) {
                bootbox.alert("<h4>Error while saving your icon!</h4>", function () { });
            });

    };

}]);
// SERVICE
app.factory('lookupService', ['$http', function ($http) {

    return {

        createLookup: function (lookup) {
            return $http({
                url: '/Lookup/CreateLookup',
                method: 'POST',
                data: lookup
            })
        },

        updateLookup: function (lookup) {
            return $http({
                url: '/Lookup/UpdateLookup',
                method: 'POST',
                data: lookup
            })
        },

        deleteLookup: function (lookup) {
            return $http({
                url: '/Lookup/DeleteLookup',
                method: 'POST',
                data: lookup
            })
        },

        getLookupList: function (name) {
            return $http.get('/Lookup/GetLookups?name=' + name);
        }
    };

}]);

// CONTROLLER
app.controller('LookupCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'lookupService', function ($scope, $http, $window, $filter, $location, Enum, lookupService) {

    window.name = getParam('name');
    $('#lookupName').html(window.name);

    getLookupList(window.name);

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (lookup) {
        lookup.editMode = !lookup.editMode;
    };

    $scope.createLookup = function () {

        if (!$scope.lookup.Value) {
            bootbox.alert("<h3>Please select lookup name!</h3>", function () { });
            return;
        }

        var lookup = {};        
        lookup["Name"] = window.name;
        lookup["Value"] = $scope.lookup.Value;

        lookupService.createLookup(lookup)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getLookupList();
                $scope.lookup.Value = '';                                
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving lookup');
        });
    };

    $scope.updateLookup = function (lookup) {        
        lookupService.updateLookup(lookup)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getLookupList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteLookup = function (lookup) {
        var deleteConfirm = $window.confirm('Are you sure to delete lookup "' + lookup.Name + '"?');
        if (deleteConfirm) {
            lookupService.deleteLookup(lookup)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getLookupList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete lookups');
            });
        }
    };

    function getLookupList() {

        lookupService.getLookupList(window.name)
        .success(function (data) {
            $scope.lookupList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);
function populateDashboardOrderList(callback) {

    $('.item-loading').show();
    $.ajax({
        dataType: "json",
        url: '/Order/GetOnlineOrdersForDashboard',
        data: { },
        success: function (recordSet) {
            $('.item-loading').hide();
            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].OrderCode);
                    record.push(siteCurrency() + recordSet[i].PayAmount);
                    record.push(recordSet[i].OrderMode);
                    record.push(recordSet[i].OrderStatus);
                    record.push(recordSet[i].PaymentStatus);
                    record.push(recordSet[i].PaymentType);
                    record.push(recordSet[i].ActionDateString);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

function GetOrderStatus(callback) {
    $.ajax({
        dataType: "json",
        url: '/Admin/GetOrderStatus',
        success: function (recordSet) {
            callback(recordSet);
        },
        error: function (xhr) {
        }
    });
}

function GetTotalItemValues(callback) {
    $.ajax({
        dataType: "json",
        url: '/Admin/GetTotalItemValues',
        success: function (recordSet) {
            callback(recordSet);
        },
        error: function (xhr) {
        }
    });
}

$(document).ready(function () {

    $("#menu-toggle").click(function (e) {
        e.preventDefault();
        $("#wrapper").toggleClass("toggled");
    });
    
});


app.factory('dashboardService', [
    '$http', function ($http) {

        return {            

        };
    }
]);

app.controller('AdminDashboardCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'dashboardService', function ($rootScope, $scope, $http, $filter, $location, Enum, dashboardService) {

    GetOrderStatus(function (data) {
        if (data) {
            $('#storeSellCount').html(data[0].StoreSell);
            $('#onlineSellCount').html(data[0].OnlineSell);
            $('#phoneOrderCount').html(data[0].PhoneOrderSell);
            $('#pendingOrderCount').html(data[0].PhoneOrderSell);
        }
    });

    GetTotalItemValues(function (data) {
        if (data) {
            $('#totalItemPosted').html(data[0].TotalItemPosted);
            $('#totalItemValue').html(data[0].TotalItemValue);            
        }
    });

    populateDashboardOrderList(function (records) {
        $('#admin-dashboard-orderlist').dataTable({
            "data": records,
            "bLengthChange": false,
            "bFilter": true,
            "pageLength": 50,
            "bDestroy": true,
            "responsive": true,
            "order": [[1, "desc"]],
            "columns": [
                { "title": "Order Id", "class": "center" },
                { "title": "Order No", "class": "center" },
                { "title": "Grand Total", "class": "right" },
                { "title": "Order Mode", "class": "center" },
                { "title": "Order Status", "class": "center" },
                { "title": "Payment Status", "class": "center" },
                { "title": "Payment Type", "class": "center" },
                { "title": "Order Date" },
                { "title": "Action", "class": "center" }
            ],
            "aoColumnDefs": [
                {
                    "aTargets": [0, 3, 8],
                    "visible": false
                },
                {
                    "aTargets": [1],
                    "mRender": function (data, type, row) {
                        var text = '<a href=/Order/OrderDetails?orderId=' + row[0] + '>' + row[1] + '</a>';
                        return $("<div/>").append(text).html();
                    }
                },
                {
                    "aTargets": [4],
                    "mRender": function (data, type, row) {

                        var status = row[4];
                        var className = 'order-status-processing';

                        if (status === 'Completed') {
                            className = 'order-status-completed';
                        }
                        else if (status === 'Processing') {
                            className = 'order-status-processing';
                        }

                        var text = '<span class="'+ className +'">' + status + '</span>';
                        return $("<div/>").append(text).html();
                    }
                },                
                {
                    "aTargets": [8],
                    "mRender": function (data, type, row) {
                        var text = '<a id=' + row[0] + ' class="btn btn-success btn-order-complete">Complete</a>';
                        return $("<div/>").append(text).html();
                    }
                }
            ]
        });        

    });

    $('.order-mode').click(function () {
        var orderStatus = getParam('orderStatus');
        var orderMode = $(this).attr('id');
        window.location.href = "/Order/OrderList?orderStatus=" + orderStatus + "&orderMode=" + orderMode;

    });


}]);
// SERVICE CALL
app.factory('settingService', ['$http', function ($http) {

    return {

        createSetting: function (setting) {
            return $http({
                url: '/Setting/CreateSetting',
                method: 'POST',
                data: setting
            })
        },

        updateSetting: function (setting) {
            return $http({
                url: '/Setting/UpdateSetting',
                method: 'POST',
                data: setting
            })
        },

        deleteSetting: function (setting) {
            return $http({
                url: '/Setting/DeleteSetting',
                method: 'POST',
                data: setting
            })
        },

        getSettingList: function () {
            return $http.get('/Setting/GetSettingList');
        },

        getSettingNameList: function () {
            return $http.get('/Setting/GetSettingNameList');
        }
    };

}]);

// CONTROLLER
function SettingCtrl($scope, $window, $http, $filter, $location, Enum, settingService) {

    getSettingNameList();
    getSettingList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (setting) {
        setting.editMode = !setting.editMode;
    };

    $scope.createSetting = function () {
        var setting = {};
        setting["Name"] = $scope.SettingName;
        setting["Value"] = $scope.SettingValue;

        settingService.createSetting(setting)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getSettingList();
                $scope.SettingValue = '';
                $scope.toggleAddMode();
            }
            else {
                bootbox.alert("<h4>This setting is already created!</h4>", function () { });
            }
        })
        .error(function (xhr) {
            bootbox.alert("<h4>Error Occured!</h4>", function () { });
        });
    };

    $scope.updateSetting = function (setting) {
        settingService.updateSetting(setting)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getSettingList();
            }
        })
        .error(function (xhr) {
            bootbox.alert("<h4>Error Occured!</h4>", function () { });
        });
    };

    $scope.deleteSetting = function (setting) {
        var deleteConfirm = $window.confirm('Are you sure to delete setting "' + setting.Name + '"?');
        if (deleteConfirm) {
            settingService.deleteSetting(setting)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getSettingList();
                }
            })
            .error(function (xhr) {
                bootbox.alert("<h4>Error Occured!</h4>", function () { });
            });
        }
    };

    function getSettingList() {
        settingService.getSettingList()
        .success(function (data) {
            $scope.settingList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve setting');
        });
    }

    function getSettingNameList() {
        settingService.getSettingNameList()
        .success(function (data) {
            $scope.settingNameList = data;
        })
        .error(function (xhr) {
            alert('Error to get setting names');
        });
    }
}

function GetMonthlySellsChart(branchId, year, callback) {
    $.ajax({
        dataType: "json",
        url: '/Report/GetMonthlySellsChart?branchId='+ branchId +'&year=' + year,
        success: function (recordSet) {
            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Month);
                    record.push(recordSet[i].TotalStoreSell);
                    record.push(recordSet[i].TotalPhoneOrderSell);
                    record.push(recordSet[i].TotalOnlineSell);
                    record.push(recordSet[i].TotalSell);
                    dataSet.push(record);
                }
            }

            $('.loader').hide();
            callback(dataSet);
        },
        error: function (xhr) {
            $('.loader').hide();
        }
    });
}

function getCategoryData(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][0]);
    }

    return result;
}

function getTotalCount(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][4]);
    }
    return result;
}

function getStoreSellsAmount(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][1]);
    }
    return result;
}

function getPhoneOrderSellsAmount(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][2]);
    }
    return result;
}

function getOnlineSellsAmount(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][3]);
    }
    return result;
}

$(document).ready(function () {
   
});

app.factory('monthlySalesChartService', [
    '$http', function ($http) {

        return {
            getBranchList: function () {
                return $http.get('/Branch/GetUserBranchList');
            }
        };
    }
]);

app.controller('MonthlySalesChartCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'monthlySalesChartService', function ($rootScope, $scope, $http, $filter, $location, Enum, monthlySalesChartService) {

    getBranchList();

    // Populate the years
    var nowY = new Date().getFullYear();
    for (var y = nowY; y >= 2010; y--) {
        $('#year').append($("<option />").val(y).text(y));
    }

    // Populate sales chart
    pupulateSalesChart(nowY);

    $('#branch').on('change', function () {
        pupulateSalesChart();
    });

    $('#year').on('change', function () {
        pupulateSalesChart();
    });


    function getBranchList() {
        monthlySalesChartService.getBranchList()
        .success(function (data) {
            for (var i = 0; i < data.length; i++) {
                $('#branch').append($("<option />").val(data[i].Id).text(data[i].Name));
            }
        })
        .error(function (xhr) { });
    }
        
    function pupulateSalesChart(year) {

        var branchId = $('#branch').val();
        var year = $('#year').val();

        if (!year) {
            year = new Date().getFullYear();
        }

        $('.loader').show();
        GetMonthlySellsChart(branchId, year, function (data) {
            
            $('#monthly-sales-chart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Monthly sells chart'
                },
                xAxis: {
                    categories: getCategoryData(data)
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Sales Amount'
                    },
                    stackLabels: {
                        enabled: true,
                        style: {
                            fontWeight: 'bold',
                            color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                        }
                    }
                },
                tooltip: {
                    headerFormat: '<b>{point.x}</b><br/>',
                    pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
                },
                plotOptions: {
                    column: {
                        stacking: 'normal',
                        dataLabels: {
                            enabled: true,
                            color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
                        }
                    }
                },
                series: [
                {
                    name: 'Online Sells',
                    color: '#e91e63',
                    data: getOnlineSellsAmount(data)

                },
                {
                    name: 'Phone Orders',
                    color: '#2e7d32',
                    data: getPhoneOrderSellsAmount(data)

                },
                {
                    name: 'Store Sells',
                    color: '#3f51b5',
                    data: getStoreSellsAmount(data)

                }
                ]
            });

        });
    }

}]);


function GetDailySellsChart(branchId, month, callback) {
    $.ajax({
        dataType: "json",
        url: '/Report/GetDailySellsChart?branchId='+ branchId +'&month=' + month,
        success: function (recordSet) {
            var dataSet = [];
            if (recordSet.length > 0) {
                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Day);
                    record.push(recordSet[i].TotalSell);                   
                    dataSet.push(record);
                }
            }

            $('.loader').hide();
            callback(dataSet);
        },
        error: function (xhr) {
            $('.loader').hide();
        }
    });
}

function getCategoryData(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][0]);
    }

    return result;
}

function getTotalSells(data) {
    var result = [];
    for (var i = 0; i < data.length; i++) {
        result.push(data[i][1]);
    }
    return result;
}

$(document).ready(function () {
   
});

app.factory('dailySalesChartService', [
    '$http', function ($http) {

        return {
            getBranchList: function () {
                return $http.get('/Branch/GetUserBranchList');
            }
        };
    }
]);

app.controller('DailySalesChartCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'dailySalesChartService', function ($rootScope, $scope, $http, $filter, $location, Enum, dailySalesChartService) {

    getBranchList();

    // Populate the years
    var currMonth = new Date().getMonth() + 1;
    currMonth = pad(currMonth, 2);

    $('#month').val(currMonth);
    
    // Populate sales chart
    pupulateSalesChart(currMonth);
    
    $('#branch').on('change', function () {
        pupulateSalesChart();
    });

    $('#month').on('change', function () {
        pupulateSalesChart();
    });

    function pad(str, max) {
        str = str.toString();
        return str.length < max ? pad("0" + str, max) : str;
    }

    function getBranchList() {
        dailySalesChartService.getBranchList()
        .success(function (data) {
            for (var i = 0; i < data.length; i++) {
                $('#branch').append($("<option />").val(data[i].Id).text(data[i].Name));
            }
        })
        .error(function (xhr) { });
    }
    
    function pupulateSalesChart(month) {

        var branchId = $('#branch').val();
        var month = $('#month').val();

        $('.loader').show();
        GetDailySellsChart(branchId, month, function (data) {
            
            $('#daily-sales-chart').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Daily sells chart'
                },
                xAxis: {
                    categories: getCategoryData(data)
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Sales Amount'
                    },
                    stackLabels: {
                        enabled: false,
                        style: {
                            fontWeight: 'bold',
                            color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                        }
                    }
                },
                tooltip: {
                    headerFormat: '<b>{point.x}</b><br/>',
                    pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
                },
                plotOptions: {
                    column: {
                        stacking: 'normal',
                        dataLabels: {
                            enabled: true,
                            color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
                        }
                    }
                },
                series: [
                {
                    name: 'Total Daily Sells',
                    color: '#283593',
                    data: getTotalSells(data)

                }                
                ]
            });

        });
    }

}]);


function populateActivityLogs(fromDate, toDate, callback) {

    $('.item-loading').show();
    $.ajax({
        dataType: "json",
        url: '/Report/GetActionLogHistory',
        data: { fromDate: fromDate, toDate: toDate },
        success: function (recordSet) {
            $('.item-loading').hide();
            var dataSet = [];
            if (recordSet.length > 0) {

                for (var i = 0; i < recordSet.length; i++) {
                    var record = [];
                    record.push(recordSet[i].Id);
                    record.push(recordSet[i].Module);
                    record.push(recordSet[i].ActionType);
                    record.push(recordSet[i].Description);
                    record.push(recordSet[i].Value);
                    record.push(recordSet[i].ActionDate);
                    record.push(recordSet[i].ActionBy);

                    dataSet.push(record);
                }
            }

            callback(dataSet);
        },
        error: function (xhr) {
            $('.item-loading').hide();
        }
    });
}

$(document).ready(function () {
   
});

app.factory('activityLogService', [
    '$http', function ($http) {

        return {
            getBranchList: function () {
                return $http.get('/Branch/GetUserBranchList');
            }
        };
    }
]);

app.controller('ActivityLogCtrl', ['$rootScope', '$scope', '$http', '$filter', '$location', 'Enum', 'activityLogService', function ($rootScope, $scope, $http, $filter, $location, Enum, activityLogService) {

    $('#dateFrom').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });
    $('#dateTo').datepicker({ autoclose: true, todayHighlight: true }).next().on(ace.click_event, function () { $(this).prev().focus(); });
    
    $scope.showReport = function () {

        var fromDate = $('#dateFrom').val();
        var toDate = $('#dateTo').val();        

        populateActivityLogs(fromDate, toDate, function (records) {
            $('#data-table-activity-logs').dataTable({
                "data": records,
                "pageLength": 100,
                "bDestroy": true,
                "order": [[5, "desc"]],
                "aoColumnDefs": [
                    {
                        "aTargets": [0,1,2],
                        "visible": false
                    },
                    {
                        "aTargets": [5],
                        "render": function (data) {
                            return moment(data, "x").format('DD MMM YYYY h:mm:ss a');
                        }
                    }
                ],

                "columns": [
                    { "title": "Id" },
                    { "title": "Module" },
                    { "title": "Action Type" },
                    { "title": "Description" },
                    { "title": "Value" },
                    { "title": "Action Date", "class": "center" },
                    { "title": "Action By", "class": "center" }
                ]

            });
        });
    }
       
}]);


// SERVICE CALL
app.factory('addCustomerService', [
    '$http', function ($http) {

        return {
            registerAccount: function (user) {
                return $http({
                    url: '/Account/RegisterAccount?byAdmin=true',
                    method: 'POST',
                    data: user
                });
            }
        };
    }
]);

// CONTROLLER
app.controller('AddCustomerCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'addCustomerService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, addCustomerService) {

    var id = getParam("id");
    if (id) {
        $('#lblAddCustomer').html('Update Customer');
        $('#btnCustomerRegister').html('Update Customer');
        populateCustomerInfo(id);
    }

    function showCreateAccountLoader() {
        $('.create-account-loading').show();
    }

    function hideCreateAccountLoader() {
        $('.create-account-loading').hide();
    }

    function clearControls() {
        $('#customerUsername').val('');
        $('#customerPassword').val('');
        $('#customerFirstName').val('');
        $('#customerLastName').val('');
        $('#customerAddress').val('');
        $('#customerZipCode').val('');
        $('#customerCity').val('');
        $('#customerState').val('');
        $('#customerCountry').val('');        
    }

    function populateCustomerInfo(id) {
        $.ajax({
            dataType: "json",
            url: '/Admin/GetCustomer?id=' + id,
            data: {},
            success: function (record) {
                if (record) {
                    $scope.Username = record.Username;

                    $('#customerUsername').val(record.Username);
                    $('#customerPassword').val(record.Password);
                    $('#customerFirstName').val(record.FirstName);
                    $('#customerLastName').val(record.LastName);
                    $('#customerAddress').val(record.ShipAddress);
                    $('#customerZipCode').val(record.ShipZipCode);
                    $('#customerCity').val(record.ShipCity);
                    $('#customerState').val(record.ShipState);
                    $('#customerCountry').val(record.ShipCountry);                    
                }
            },
            error: function (xhr) {
                $('.item-loading').hide();
            }
        });
    }

    $scope.registerAccount = function (form) {

        $scope.submitted = true;
        if ($scope.myForm.$invalid) {
            return false;
        }

        var username = $('#customerUsername').val();
        var password = $('#customerPassword').val();
        var firstName = $('#customerFirstName').val();
        var lastName = $('#customerLastName').val();
        var address = $('#customerAddress').val();
        var zipCode = $('#customerZipCode').val();
        var city = $('#customerCity').val();
        var state = $('#customerState').val();
        var country = $('#customerCountry').val();        

        $scope.submitted = true;
        setButtonState('btnRegister', true);
        showCreateAccountLoader();

        var user = {};        
        var id = getParam("id");
        if (id) {
            user["Id"] = id;
        }

        user["Username"] = username;
        user["Password"] = password;        
        user["FirstName"] = firstName;
        user["LastName"] = lastName;
        user["ShipAddress"] = address;
        user["ShipZipCode"] = zipCode;
        user["ShipCity"] = city;
        user["ShipState"] = state;
        user["ShipCountry"] = country;

        addCustomerService.registerAccount(user)
            .success(function (data) {
                if (data.isSuccess) {
                    if (id) {
                        bootbox.alert("<h4>Customer updated successfully!</h4>", function () { });
                    }
                    else {
                        clearControls();
                        bootbox.alert("<h4>Customer created successfully!</h4>", function () { });
                    }
                } else {
                    if (data.message) {
                        bootbox.alert("<h4>" + data.message + "</h4>", function () { });
                    }
                    else {
                        bootbox.alert("<h4>Failed to create customer account!</h4>", function () { });
                    }
                }

                setButtonState('btnRegister', false);
                hideCreateAccountLoader();
            })
            .error(function (xhr) {
                bootbox.alert("<h4>Error occured while saving customer account!</h4>", function () { });
                setButtonState('btnRegister', false);
                hideCreateAccountLoader();
            });
    };
}]);


// SERVICE
app.factory('customerListService', ['$http', function ($http) {

    return {
        getCustomerList: function () {
            return $http.get('/Admin/GetCustomerList');
        }
    };

}]);

// CONTROLLER
app.controller('customerListCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'customerListService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, customerListService) {

    populateRecords();

    function populateCustomerList(callback) {

        $('.item-loading').show();
        $.ajax({
            dataType: "json",
            url: '/Admin/GetCustomerList',
            data: { },
            success: function (recordSet) {
                $('.item-loading').hide();                
                var dataSet = [];
                if (recordSet.length > 0) {
                    for (var i = 0; i < recordSet.length; i++) {
                        var record = [];

                        record.push(recordSet[i].Id);
                        record.push(recordSet[i].Username);
                        record.push(recordSet[i].Password);
                        record.push(recordSet[i].FirstName);
                        record.push(recordSet[i].LastName);                                                
                        record.push(recordSet[i].ShipAddress);
                        
                        dataSet.push(record);
                    }
                }

                callback(dataSet);
            },
            error: function (xhr) {
                $('.item-loading').hide();
            }
        });
    }
        
    function populateRecords() {

        populateCustomerList(function (records) {
            $('#table-customer-list').dataTable({
                "data": records,
                "destroy": true,
                "bLengthChange": false,
                "bFilter": true,
                "pageLength": 100,
                "columns": [
                    { "title": "Id" },
                    { "title": "Username" },
                    { "title": "Password" },
                    { "title": "First Name" },
                    { "title": "Last Name" },                                        
                    { "title": "Address" }
                ],
                "aoColumnDefs": [
                    {
                        "aTargets": [0],
                        "visible": false
                    },                    
                    {
                        "aTargets": [6],
                        "searchable": false,
                        "sortable": false,
                        "mRender": function (data, type, row) {
                            var buttons = '<div><a style="width:100px;" title="Edit" id=' + row[0] + ' class="btn btn-primary edit-user cursor-pointer"><b>Edit</b></a></div>';
                            return $("<div/>").append(buttons).html();
                        }
                    }
                ]
            });
        });

    }

    $('#table-customer-list').on('click', '.edit-user', function () {
        var userId = $(this).attr('id');
        window.location.href = '/Admin/CustomerAdd?id=' + userId;
    });
        
}]);
$(document).ready(function () {

    var fromRegistration = getParam("fromReg");
    if (fromRegistration === 'yes') {
        $('#statusMsg').show();
    }

    $("#inputFile").change(function () {
        readURL(this);
    });

    $("#btnPhotoCancel").click(function () {
        $('#imgTemp').attr('src', '/Images/no-image.png');
        $('#divSavePhoto').hide();
    });

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgTemp').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);

            $('#divSavePhoto').show();
        }
    }
});

// SERVICE
app.factory('homeSliderService', ['$http', function ($http) {

    return {
        savePhoto: function (url, displayOrder, formData) {

            displayOrder = !displayOrder ? 0 : parseInt(displayOrder, 10);

            return $http.post('/HomeSlider/SaveSliderImage?url=' + url + '&displayOrder=' + displayOrder, formData, {
                withCredentials: true,
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            });
        },

        getPhotoList: function () {
            return $http({
                url: '/HomeSlider/GetSliderImageList',
                method: 'GET',
                params: { }
            });
        },
        
        deletePhoto: function (imageName) {
            return $http({
                url: '/HomeSlider/DeleteSliderImage',
                method: 'GET',
                contentType: "application/json; charset=utf-8",
                params: { imageName: imageName }
            });
        }

    };
}
]);

// CONTROLLER
app.controller('homeSliderCtrl', ['$rootScope', '$scope', '$http', '$window', '$filter', '$location', 'Enum', 'homeSliderService', function ($rootScope, $scope, $http, $window, $filter, $location, Enum, homeSliderService) {

    loadPhotos();

    function loadPhotos() {
        homeSliderService.getPhotoList()
            .success(function (data) {
                $scope.photoList = data;
            })
            .error(function (xhr) {
            });
    };
    
    $scope.selectPhoto = function (files) {
        $scope.sliderImage = files[0];
    };

    $scope.deletePhoto = function (imageName) {
        bootbox.confirm("<h4>Are you sure to delete this image?</h4>",
            function (result) {
                if (result) {
                    homeSliderService.deletePhoto(imageName)
                        .success(function (data) {
                            if (data.isSuccess) {
                                loadPhotos();
                            }
                            else {
                                bootbox.alert("<h4>Failed to delete this image!</h4>", function () { });
                            }
                        })
                        .error(function (exception) {
                            bootbox.alert("<h4>Error occured while deleting this image!</h4>", function () { });
                        });
                }
            });
    }

    $scope.uploadPhoto = function () {
        $scope.submitted = true;

        if ($scope.myForm.$invalid) {
            return false;
        }

        savePhoto();
    };

    var savePhoto = function () {
        var file = $scope.sliderImage;

        $scope.CheckFile(file);
        if (!$scope.IsFileValid) {
            return false;
        }

        var formData = new FormData();
        formData.append("file", file);

        homeSliderService.savePhoto($scope.Url, $scope.DisplayOrder, formData)
        .success(function (data) {
            if (data.isSuccess) {
                loadPhotos();

                $('#imgTemp').attr('src', '/Images/no-image.png');
                $('#divSavePhoto').hide();

            }
            else {
                bootbox.alert("<h4>" + data.message + "</h4>", function () { });
            }
        })
        .error(function (exception) {
            bootbox.alert("<h4>Error while saving your photo!</h4>", function () { });
        });

    };

    //File type(images) validation
    $scope.CheckFile = function (file) {
        $scope.IsFileValid = false;
        if (file != null) {
            if ((file.type == 'image/gif' || file.type == 'image/png' || file.type == 'image/jpeg') && file.size <= (4096 * 1024)) { // limit photo size to 4 mb
                $scope.FileInvalidMessage = "";
                $scope.IsFileValid = true;
            }
            else {
                $scope.IsFileValid = false;
                bootbox.alert("<h4>Invalid file is selected. (File format must be gif or png or jpeg. Maximum file size 4 mb)</h4>", function () { });
            }
        }
        else {
            bootbox.alert("Please choose product image!", function () { });
        }
    };
}]);
// SERVICE
app.factory('attributeNameService', ['$http', function ($http) {

    return {

        createAttributeName: function (attributeName) {
            return $http({
                url: '/Attribute/CreateAttributeName',
                method: 'POST',
                data: attributeName
            })
        },

        updateAttributeName: function (attributeName) {
            return $http({
                url: '/Attribute/UpdateAttributeName',
                method: 'POST',
                data: attributeName
            })
        },

        deleteAttributeName: function (attributeName) {
            return $http({
                url: '/Attribute/DeleteAttributeName',
                method: 'POST',
                data: attributeName
            })
        },

        getAttributeNameList: function () {
            return $http.get('/Attribute/GetAttributeNameList');
        }
    };

}]);

// CONTROLLER
app.controller('AttributeNameCtrl', ['$scope', '$http', '$window', '$filter', '$location', 'Enum', 'attributeNameService', function ($scope, $http, $window, $filter, $location, Enum, attributeNameService) {

    getAttributeNameList();

    $scope.addMode = false;

    $scope.toggleAddMode = function () {
        $scope.addMode = !$scope.addMode;
    };

    $scope.toggleEditMode = function (attributeName) {
        attributeName.editMode = !attributeName.editMode;
    };

    $scope.createAttributeName = function () {

        if (!$scope.attributeName.Name) {
            bootbox.alert("<h3>Please select attributeName name!</h3>", function () { });
            return;
        }

        var attributeName = {};
        attributeName["Id"] = $scope.attributeName.Id;
        attributeName["Name"] = $scope.attributeName.Name;                
        attributeName["Value"] = $scope.attributeName.Value;

        attributeNameService.createAttributeName(attributeName)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getAttributeNameList();
                $scope.attributeName.Name = '';
                $scope.attributeName.Value = '';
                $scope.toggleAddMode();
            }
        })
        .error(function (xhr) {
            ShowError('Error to saving attributeName');
        });
    };

    $scope.updateAttributeName = function (attributeName) {
        attributeNameService.updateAttributeName(attributeName)
        .success(function (data) {
            if (data && data.IsSuccess) {
                getAttributeNameList();
            }
        })
        .error(function (xhr) {
            ShowError('Error to update records');
        });
    };

    $scope.deleteAttributeName = function (attributeName) {
        var deleteConfirm = $window.confirm('Are you sure to delete attributeName "' + attributeName.Name + '"?');
        if (deleteConfirm) {
            attributeNameService.deleteAttributeName(attributeName)
            .success(function (data) {
                if (data && data.IsSuccess) {
                    getAttributeNameList();
                }
            })
            .error(function (xhr) {
                ShowError('Error to delete attributeNames');
            });
        }
    };

    $scope.addAttr = function (attributeName) {        
        window.open('/Admin/AttributeConfig?catId=' + attributeName.Id + '&catName=' + attributeName.Name, '_blank');
    };

    function getAttributeNameList() {
        attributeNameService.getAttributeNameList()
        .success(function (data) {
            $scope.attributeNameList = data;
        })
        .error(function (xhr) {
            ShowError('Error to retrieve Student Class');
        });
    }

    function ShowError(errorText) {
        $('.error-message').show();
        $('.error-list').append('<li>' + errorText + '</li>');
    }
}]);